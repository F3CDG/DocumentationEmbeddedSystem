#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass book
\begin_preamble
\usepackage{listings,xcolor,courier,bookmark}
\usepackage{listingsutf8}
\definecolor{darkblue}{named}{blue}
\definecolor{darkred}{named}{red}
\definecolor{grau}{named}{gray}
\let\Righttorque\relax
\lstset{
captionpos=b,
commentstyle=\color[rgb]{0.133,0.545,0.133},
keywordstyle=\color{darkblue},
stringstyle=\color{darkred},
extendedchars=true,
basicstyle=\small\ttfamily,
showstringspaces=false,
tabsize=2,
numbers=left,
numberstyle=\tiny,
breakautoindent  = true,
breakindent      = 2em,
breaklines       = true,
postbreak        = ,
prebreak         = \raisebox{-.8ex}[0ex][0ex]{\Righttorque},
showspaces=false, 
showtabs=false, 
showstringspaces=false,
language=VHDL,
frame=single,
morecomment=[s]{--}
}


\renewcommand*{\lstlistingname}{Codice Componente}


\usepackage{fancyhdr}
\pagestyle{fancy}

\fancyhead{} 
\fancyfoot{} 

\fancyhead[RO,LE]{\bfseries \leftmark}
\fancyfoot[LE,RO]{\thepage}
\fancyfoot[LO,CE]{Tesina in SE: Sistemi Embedded}
\renewcommand{\headrulewidth}{0.4pt}
\renewcommand{\footrulewidth}{0.4pt}

\date{}
\cfoot{}
\end_preamble
\use_default_options true
\master Tesina.lyx
\maintain_unincluded_children false
\language italian
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 2.5cm
\rightmargin 2cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Procedimento
\end_layout

\begin_layout Subsection
Requisiti
\end_layout

\begin_layout Standard
Il tutorial è stato realizzato utilizzando, come sistema operativo, Ubuntu
 16.04.
 Per eseguire correttamente la procedura è necessario installare:
\end_layout

\begin_layout Itemize

\series bold
Xilinx Vivado
\series default
, che fornisce un ambiente per la progettazione di componenti per FPGA,
 prodotti dall'azienda Xilinx.
 Di seguito è stata utilizzata la versione 2016.4, scaricabile al link 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://www.xilinx.com/support/download.html
\end_layout

\end_inset

;
\end_layout

\begin_layout Itemize

\series bold
Xilinx SDK
\series default
, che fornisce un ambiente per la creazione di piattaforme e applicazioni
 software, destinate a processori embedded di Xilinx.
 SDK è basato su Eclipse e lavora su progetti hardware realizzati con Vivado.
\end_layout

\begin_layout Standard
Inoltre, bisogna procurare i seguenti elementi da caricare sulla SD card:
\end_layout

\begin_layout Itemize

\series bold
Linux file system
\series default
;
\end_layout

\begin_layout Itemize
immagine di un 
\series bold
kernel Linux
\series default
;
\end_layout

\begin_layout Itemize
file 
\series bold
BOOT.bin
\series default
;
\end_layout

\begin_layout Itemize

\series bold
device tree
\series default
 compilato.
\end_layout

\begin_layout Standard
Premesso che è necessario essere in possesso di:
\end_layout

\begin_layout Itemize
board 
\series bold
Zynq Zybo 7000
\end_layout

\begin_layout Itemize

\series bold
micro SD card
\series default
 di almeno 4 Gb
\end_layout

\begin_layout Standard
nei paragrafi successivi viene illustrato, passo passo, come generare gli
 elementi da caricare sulla card e le fasi successive utili al completamento
 dell'esercitazione.
 
\end_layout

\begin_layout Subsection
Workspace setting
\end_layout

\begin_layout Standard
Prima di iniziare, se sulla macchina non è istallato il CVS git, digitare
 il comando
\end_layout

\begin_layout Standard
\align center

\family typewriter
sudo apt-get install git
\end_layout

\begin_layout Standard
e successivamente dare il comando
\end_layout

\begin_layout Standard
\align center

\family typewriter
sudo apt-get install u-boot-tools
\end_layout

\begin_layout Standard
Creare, quindi, una cartella di lavoro 
\shape italic
workspace_master
\shape default
 in cui verranno salvati tutti i file utili all'esercitazione.
 Nel caso in esame la cartella ha il seguente path: 
\shape italic
/home/daniele/Scrivania/workspace_master
\shape default
.
 Portarsi all'interno di essa e, aperto un terminale, digitare i comandi
\end_layout

\begin_layout Standard
\align center

\family typewriter
git clone -b master-next https://github.com/DigilentInc/u-boot-Digilent-Dev.git
\family default
 
\end_layout

\begin_layout Standard
\align center

\family typewriter
git clone -b master-next https://github.com/DigilentInc/Linux-Digilent-Dev.git
\end_layout

\begin_layout Standard
In questo modo, nella cartella vengono create 2 sottocartelle:
\end_layout

\begin_layout Itemize

\shape italic
u-boot-Digilent-Dev
\shape default
, contenente il codice U-boot della Digilent.
 L'U-boot è un boot loader per schede Embedded basate su processore ARM,
 MIPS, PowerPC e altri, che può essere installato su una boot ROM e usato
 per inizializzare e testare l'hardware oppure per scaricare e avviare codice
 applicativo;
\end_layout

\begin_layout Itemize

\shape italic
Linux-Digilent-Dev
\shape default
, contenente il kernel Linux 3.x.
\end_layout

\begin_layout Standard
A questo punto, sempre nella cartella di progetto, creare un file di script
 e chiamarlo set_ambiente.sh.
 Al suo interno, si scrivono i seguenti comandi utili per configurare alcune
 variabili d'ambiente per la compilazione del Kernel Linux e del file U-boot:
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=bash] 
\end_layout

\begin_layout Plain Layout

export ARCH=arm  
\end_layout

\begin_layout Plain Layout

export CROSS_COMPILE=arm-xilinx-linux-gnueabi-  
\end_layout

\begin_layout Plain Layout

export PATH=$PATH:/usr/Xilinx/SDK/2016.4/gnu/arm/lin/bin:/home/daniele/Scrivania/
workspace_master/u-boot-Digilent-Dev/tools 
\end_layout

\begin_layout Plain Layout

source /usr/Xilinx/Vivado/2016.4/settings64.sh  
\end_layout

\begin_layout Plain Layout

source /usr/Xilinx/SDK/2016.4/settings64.sh 
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Chiaramente, bisogna adattare oportunamente i path dei comandi in base a
 dove sono stati istallati gli ambienti di lavoro e in base a dove è stata
 creata la cartella 
\shape italic
workspace_master
\shape default
.
 D'ora in avanti, nella documentazione, quando bisognerà riferirsi alla
 cartella di lavoro si utilizzerà il suo path relativo.
 
\end_layout

\begin_layout Standard
Creare, quindi, una cartella di nome 
\shape italic
sd_file
\shape default
 in cui saranno salvati tutti i file utili al settaggio dell'SD card.
 Infine, creare le seguenti sottocartelle 
\shape italic
workspace_master/zybo_base_system/source/hw
\shape default
 in cui verrà salvato il progetto hardware sviluppato con Vivado.
\end_layout

\begin_layout Standard
Alla fine della fase di settaggio, la situazione dovrebbe essere simile
 a quella in fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Cartella-di-progetto"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/img_1.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Cartella-di-progetto"

\end_inset

Cartella di progetto
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Sintesi Hardware
\end_layout

\begin_layout Standard
L'obiettivo di questa prima fase è di sintetizzare, attraverso l'ambiente
 Vivado, un componente GPIO con le interruzioni abilitate, attraverso cui
 pilotare i led della board.
\end_layout

\begin_layout Standard
Aperto Vivado, dunque, realizzare un nuovo progetto di nome 
\shape italic
\color blue
project_gpio_interrupt
\shape default
\color inherit
 nel path creato appositamente nel paragrafo precedente, fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Creazione-progetto"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Img_3.png
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Creazione-progetto"

\end_inset

Creazione nuovo progetto in Vivado
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
A questo punto, seguendo i passi descritti nel Tutorial 1, si crea un nuovo
 Block Design a cui si da il nome 
\shape italic
\color blue
design_for_gpio_interrupt
\shape default
\color inherit
, nel quale si importano i seguenti IP-core:
\end_layout

\begin_layout Itemize
ZYNQ7 Processign System;
\end_layout

\begin_layout Itemize
AXI GPIO (fornita da Xilinx).
\end_layout

\begin_layout Standard
Facendo doppio click sul blocco AXI GPIO, si apre una finestra che consente
 di personalizzare l'IP-core importato.
 Selezionare, come interfaccia della board, quella dei led (
\shape italic
led 4bits
\shape default
) e spuntare l'opzione 
\shape italic
enable interrupts
\shape default
, fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Re-customize IP GPIO"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Img_4.png
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Re-customize IP GPIO"

\end_inset

Re-customize IP AXI GPIO
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Facendo doppio click sul blocco ZYNQ7 Processing System, si apre un'altra
 finestra Re-customize IP, fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Re-customize IP ZYNQ7"

\end_inset

.
 Nel Zynq Block Design è possibile osservare tutta la parte architetturale
 della Programmable Logic.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Img_5.png
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Re-customize IP ZYNQ7"

\end_inset

Re-customize IP ZYNQ7 Processing System
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Nel Page Navigator a sinistra, selezionare Interrupts.
 Spuntare, quindi, l'opzione 
\shape italic
Fabric Interrupts
\shape default
 e, dopo aver aperto il menù a tendina PL-PS Interrupt Ports, spuntare anche
 
\shape italic
IRQ_F2P
\shape default
, fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:IRQ_F2Q Interrupt"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Img_6.png
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:IRQ_F2Q Interrupt"

\end_inset

IRQ_F2P Interrupt
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
A questo punto bisogna eseguire le operazione di 
\series bold
Run Block Automation
\series default
 e 
\series bold
Run Connection Automation
\series default
.
 Quando si esegue quest'ultima spuntare l'opzione All automation, presente
 nella porzione sinistra della finestra che si apre, fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Run Connection Automation"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Img_7.png
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Run Connection Automation"

\end_inset

Run Connection Automation
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
A questo punto, bisogna collegare manualmente l'interfaccia 
\shape italic
ip2intc_irpt
\shape default
 dell'AXI GPIO con IRQ_F2P di ZYNQ7 Processing System.
 Tale collegamento è evidenziato in giallo in fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Interrupt Connection"

\end_inset

 .
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Img_8.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Interrupt Connection"

\end_inset

Interrupt Connection
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Dopo aver validato il design (F6), si crea il wrapper del progetto.
\end_layout

\begin_layout Standard
A questo punto, in Flow Navigator, cliccare 
\series bold
Generate Bitstream
\series default
.
 Si noti che viene avviata automaticamente sia la fase di sintesi sia quella
 di implementazione, propedeutiche per la generazione del bitsream del progetto.
\end_layout

\begin_layout Standard
Come ci si può aspettare, se tra i Layout del progetto si seleziona 
\series bold
Floorplanning
\series default
, nella schermata I/O Ports è stato fatto automaticamente il mapping dei
 pad del GPIO con i led della board.
\end_layout

\begin_layout Standard
Andare su 
\series bold
File → Export → Export Hardware
\series default
 e spuntare l'opzione 
\shape italic
Include bitstream
\shape default
.
 Infine cliccare su 
\series bold
File → Launch SDK
\series default
 per aprire l'ambiente Xilinx SDK.
\end_layout

\begin_layout Subsection
Compilazione U-boot
\end_layout

\begin_layout Standard
In questa fase si mostra come compilare l'
\series bold
U-boot
\series default
, Universal Boot Loader.
 Questo viene lanciato dal 
\series bold
FSBL
\series default
, First Stage Boot Loader, e ha il compito di decomprimere il kernel Linux,
 caricarlo dall'SD-card alla memoria RAM e lanciarlo.
\end_layout

\begin_layout Standard
Preliminarmente bisogna modificare il file 
\series bold
zynq_zybo.h
\series default
, presente in 
\shape italic
workspace_master/u-boot-Digilent-Dev/include/configs
\shape default
, per evitare che l'U-boot carichi i settaggi del ramdisk.
 In particolare, si eliminano tutte le occorrenze relative al ramdisk.
 Nelle fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Occorrenze ramdisk"

\end_inset

 e 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Eliminazione occorrenza"

\end_inset

 viene mostrato un esempio in cui è stata eliminata la prima occorrenza
 evidenziata in arancione.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Img_9.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Occorrenze ramdisk"

\end_inset

Occorrenze ramdisk in zynq_zybo.h
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Img_10.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Eliminazione occorrenza"

\end_inset

Eliminazione prima occorrenza ramdisk in zynq_zybo.h
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Dopo aver eliminato tutte le occorrenze, bisogna modificare opportunamente
 tutte le righe di codice che contengono 
\family typewriter
bootm
\family default
.
 Tale comando viene usato per fare il boot dell'immagine del kernel salvata
 in memoria.
 Il primo parametro passato è l'indirizzo dove si trova il kernel; il secondo
 parametro rappresenta l'indirizzo dell'immagine dell'initrd; il terzo parametro
 rappresenta, invece, l'indirizzo del device tree blob.
 Non dovendo utilizzare l'initrd, bisogna sostituire il suo indirizzo con
 il carattere 
\family typewriter
-
\family default
 , come viene evidenziato in fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Modifica comando bootm"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Img_11.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Modifica comando bootm"

\end_inset

Modifica comando 
\family typewriter
bootm
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Portarsi ora nella cartella di progetto, aprire un terminale e lanciare
 il comando
\end_layout

\begin_layout Standard
\align center

\family typewriter
source set_ambiente.sh
\end_layout

\begin_layout Standard
Entrare, quindi, nella cartella 
\shape italic
u-boot-Digilent-Dev
\shape default
 con il comando
\end_layout

\begin_layout Standard
\align center

\family typewriter
cd u-boot-Digilent-Dev/ 
\end_layout

\begin_layout Standard
ed eseguire i comandi
\end_layout

\begin_layout Standard
\align center

\family typewriter
make CROSS_COMPILE=arm-xilinx-linux-gnueabi- zynq_zybo_config
\family default
 
\end_layout

\begin_layout Standard
per selezionare la configurazione specifica della board Zybo e
\end_layout

\begin_layout Standard
\align center

\family typewriter
make CROSS_COMPILE=arm-xilinx-linux-gnueabi-
\end_layout

\begin_layout Standard
per compilare l'U-boot file.
\end_layout

\begin_layout Standard
A questo punto nella cartella in cui ci si trova è stato creato il file
 u-boot che bisogna copiare nella cartella 
\shape italic
sd_file
\shape default
 aggiungendo l'estenzione .elf, usando il comando
\end_layout

\begin_layout Standard
\align center

\family typewriter
cp u-boot ../sd_file/u-boot.elf
\end_layout

\begin_layout Subsection
Generazione FSBL
\end_layout

\begin_layout Standard
L'FSBL è il responsabile del caricamento del bitstream e della configurazione
 del Processing System della Zynq a tempo di boot.
\end_layout

\begin_layout Standard
Per generarlo, in Xilinx SDK aperto in precedenza, andare su 
\series bold
File → New → Application Project
\series default
.
 e chiamare il progetto 
\shape italic
\color blue
fsbl
\shape default
\color inherit
, fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:New Project"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Img_12.png
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:New Project"

\end_inset

New Project
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Come template si seleziona Zynq FSBL, fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Template"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Img_13.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Template"

\end_inset

Zynq FSBL Template
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
A questo punto andare su 
\series bold
Project → Build All
\series default
 per fare il build del progetto e generare il file 
\series bold
fsbl.elf
\series default
 nella directory 
\shape italic
workspace_master/zybo_base_system/source/hw/project_gpio_interrupt/project_gpio_
interrupt.sdk/fsbl/Debug
\shape default
.
\end_layout

\begin_layout Subsection
Generazione BOOT.bin
\end_layout

\begin_layout Standard
Arrivati a questa fase si ha tutto il necessario per generare il 
\series bold
BOOT.bin
\series default
.
 Quest'ultimo contiene al suo interno alcuni file specifici Xilinx utili
 a configurare le due parti della Zynq: la Programmable Logic e il Processing
 System.
 Al suo interno integra, in ordine, i seguenti file:
\end_layout

\begin_layout Enumerate
fsbl.elf;
\end_layout

\begin_layout Enumerate
design_for_gpio_interrupt_wrapper.bit;
\end_layout

\begin_layout Enumerate
u-boot.elf.
\end_layout

\begin_layout Standard
Sempre nell'ambiente Xilinx SDK, nel menu in alto, selezionare 
\series bold
Xilinx Tools → Create Boot Image
\series default
.
 Nel wizard che si apre, si sceglie di salvare i file output.bif e BOOT.bin
 nella sottocartella
\shape italic
 sd_file
\shape default
, indicandolo rispettivamente in Output BIF file path e in Output path.
 Inoltre, nella sezione Image Boot Partitions, cliccando su Add si aggiungono
 i file sopra elencati, rispettando pedissequamente l'ordine indicato, fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Create Boot Image"

\end_inset

.
\end_layout

\begin_layout Standard
Per completezza, si riportano, di seguito, i path dei file da inserire.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting} 
\end_layout

\begin_layout Plain Layout

workspace_master/zybo_base_system/source/hw/project_gpio_interrupt/project_gpio_
interrupt.sdk/fsbl/Debug/fsbl.elf
\end_layout

\begin_layout Plain Layout

workspace_master/zybo_base_system/source/hw/project_gpio_interrupt/project_gpio_
interrupt.sdk/design_for_gpio_interrupt_wrapper_hw_platform_0/design_for_gpio_int
errupt_wrapper.bit
\end_layout

\begin_layout Plain Layout

workspace_master/sd_file/u-boot.elf
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Img_14.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Create Boot Image"

\end_inset

Create Boot Image
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Cliccare, infine, su Create Image.
\end_layout

\begin_layout Subsection
Generazione uImage
\end_layout

\begin_layout Standard
Per compilare il kernel Linux portarsi nella cartella 
\shape italic
workspace_master/Linux-Digilent-Dev
\shape default
 con il comando 
\end_layout

\begin_layout Standard
\align center

\family typewriter
cd ../Linux-Digilent-Dev/ 
\end_layout

\begin_layout Standard
Digitando il comando
\end_layout

\begin_layout Standard
\align center

\family typewriter
make config
\end_layout

\begin_layout Standard
è possibile creare una configurazione custom del kernel che si vuole compilare,
 mediante un'interfaccia testuale.
 La medesima operazione è possibile farla utilizzando il comando
\end_layout

\begin_layout Standard
\align center

\family typewriter
make menuconfig
\end_layout

\begin_layout Standard
che, invece, mette a disposizione un vero e proprio menu di configurazione.
 Per maggiori approfondimenti si rimanda alla lettura del file README presente
 in 
\shape italic
workspace_master/Linux-Digilent-Dev
\shape default
.
 
\end_layout

\begin_layout Standard
In alternativa, si può utilizzare il comando
\end_layout

\begin_layout Standard
\align center

\family typewriter
make ${PLATFORM}_defconfig
\end_layout

\begin_layout Standard
che crea un file di configurazione utilizzando valori simbolo di default
 per l'architettura 
\family typewriter
${PLATFORM}
\family default
 specificata.
 Per semplicità, in questa documentazione viene scelta quest'ultima strada
 tra le tre proposte.
 Digitare, dunque, il comando
\end_layout

\begin_layout Standard
\align center

\family typewriter
make xilinx_zynq_defconfig
\end_layout

\begin_layout Standard
A questo punto, con il comando
\end_layout

\begin_layout Standard
\align center

\family typewriter
make
\end_layout

\begin_layout Standard
viene creato il file zImage, immagine compressa (
\shape italic
zipped
\shape default
) del Kernel, nella directory
\shape italic
 workspace_master/Linux-Digilent-Dev/arch/arm/boot
\shape default
.
 Per poter essere utilizzata dal bootloade, tale immagine deve essere decompress
a e questo lo si fa attraverso il comando
\end_layout

\begin_layout Standard
\align center

\family typewriter
make UIMAGE_LOADADDR=0x8000 uImage
\end_layout

\begin_layout Standard
che specifica anche a che locazione di memoria viene caricato il kernel
 Linux.
 Per completezza in fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Create uImage file"

\end_inset

 si riporta l'output dello script eseguito.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Img_15.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Create uImage file"

\end_inset

Create uImage file
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Come si evince dalla precedente figura, il file uImage (
\shape italic
unzipped
\shape default
) viene creato nella stessa directory del file zImage.
 Lo si copia, quindi, nella cartella sd_file
\end_layout

\begin_layout Standard
\align center

\family typewriter
cp arch/arm/boot/uImage ../sd_file/uImage
\end_layout

\begin_layout Subsection
Generazione del DTB
\end_layout

\begin_layout Standard
Il 
\series bold
DTB
\series default
, Device Tree Blob, è una sorta di database che rappresenta tutti i componenti
 hardware di una specifica board.
 In sostanza è il meccanismo scelto per passare informazioni hardware di
 basso livello dal bootloader al kernel.
 Il DTB viene generato a partire da un altro file chiamato 
\series bold
DTS
\series default
, Device Tree Source.
 Nel caso specifico, quest'ultimo lo si trova nella cartella 
\shape italic
workspace_master/Linux-Digilent-Dev/arch/arm/boot/dts
\shape default
.
 Tra i file .dts disponibili, cercare, dunque, il file 
\series bold
zynq-zybo.dts
\series default
 (specifico della Zybo) ed aprirlo con un editor di testo.
\end_layout

\begin_layout Standard
Apportare le modifiche alle righe 
\begin_inset Formula $42$
\end_inset

, 
\begin_inset Formula $51$
\end_inset

 e 
\begin_inset Formula $60$
\end_inset

 presenti in fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Modifiche-a-zynq-zybo.dts"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Img_16.png
	lyxscale 70
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Modifiche-a-zynq-zybo.dts"

\end_inset

Modifiche a zynq-zybo.dts
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
A questo punto, sempre nella cartella 
\shape italic
workspace/Linux-Digilent-Dev
\shape default
 digitare
\end_layout

\begin_layout Standard
\align center

\family typewriter
./scripts/dtc/dtc -I dts -O dtb -o ../sd_file/devicetree.dtb ./arch/arm/boot/dts/zynq
-zybo.dts
\end_layout

\begin_layout Standard
per generare 
\series bold
devicetree.dtb
\series default
 nella cartella 
\shape italic
sd_file
\shape default
.
\end_layout

\begin_layout Subsection
Partizionamento SD card
\end_layout

\begin_layout Standard
Generati i file BOOT.bin, devicetree.dtb e uImage non resta che formattare
 la micro SD card.
 Nel caso in esame viene utilizzato il tool 
\series bold
gparted
\series default
.
 Se non lo si possiede, istallarlo mediante il comando
\end_layout

\begin_layout Standard
\align center

\family typewriter
sudo apt-get install gparted
\end_layout

\begin_layout Standard
Collegare opportunamente la micro SD card al computer.
 Nel caso in esame viene utilizzato un adattatore mini SD card - SD card.
 Avviato, quindi, gparted con
\end_layout

\begin_layout Standard
\align center

\family typewriter
sudo gparted
\end_layout

\begin_layout Standard
creare le seguenti partizioni:
\end_layout

\begin_layout Itemize

\series bold
BOOT_F
\series default
, di tipo FAT32 di almeno 
\begin_inset Formula $1$
\end_inset

 Gb, fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Partizione BOOT_F"

\end_inset

;
\end_layout

\begin_layout Itemize

\series bold
ROOT_FS
\series default
, di tipo ext4 di almeno 
\begin_inset Formula $3$
\end_inset

 Gb, fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Partizione ROOT_FS"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Img_17.png
	lyxscale 70
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Partizione BOOT_F"

\end_inset

Prima partizione: BOOT_F
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Img_18.png
	lyxscale 70
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Partizione ROOT_FS"

\end_inset

Seconda partizione: ROOT_FS
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Al termine delle operazioni di partizionamento la situazione dovrebbe essere
 quella in fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Partizionamento Sd"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Img_19.png
	lyxscale 70
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Partizionamento Sd"

\end_inset

Partizionamento SD card
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Si noti che bisogna lasciare 
\begin_inset Formula $4$
\end_inset

 Mb di spazio non allocato.
\end_layout

\begin_layout Subsection
Settaggio SD card per il boot
\end_layout

\begin_layout Standard
A questo punto nella partizione BOOT_F della micro SD card bisogna copiare
 i file:
\end_layout

\begin_layout Description
- BOOT.bin;
\end_layout

\begin_layout Description
- devicetree.dtb;
\end_layout

\begin_layout Description
- uImage.
\end_layout

\begin_layout Standard
Per far ciò, portarsi nella cartella di lavoro e digitare:
\end_layout

\begin_layout Standard
\align center

\family typewriter
cp sd_file/BOOT.bin /media/daniele/BOOT_F 
\end_layout

\begin_layout Standard
\align center

\family typewriter
cp sd_file/devicetree.dtb /media/daniele/BOOT_F
\end_layout

\begin_layout Standard
\align center

\family typewriter
cp sd_file/uImage /media/daniele/BOOT_F
\end_layout

\begin_layout Standard
Il risultato dovrebbe essere quello mostrato in fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Copia BOOT_F"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Img_20.png
	lyxscale 70
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Copia BOOT_F"

\end_inset

Copia file in BOOT_F
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Ora, bisogna caricare un filesystem nella seconda partizione predisposta
 appositamente, ROOT_FS.
 Nel caso in esame viene scelto 
\series bold
Linaro file system
\series default
.
 Utilizzando il link 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

http://releases.linaro.org/
\end_layout

\end_inset

 è possibile ottenere la versione che si preferisce.
 In questo tutorial viene scaricata 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

https://releases.linaro.org/archive/12.11/ubuntu/precise-images/ubuntu-desktop/lina
ro-precise-ubuntu-desktop-20121124-560.tar.gz
\end_layout

\end_inset

.
\end_layout

\begin_layout Standard
Portarsi nella cartella in cui è stato scaricato il file system.
 Creare una cartella di nome 
\shape italic
linaro
\shape default
 sotto 
\shape italic
/temp
\shape default
 dove andare a copiare l'immagine Linaro zippata.
\end_layout

\begin_layout Standard
\align center

\family typewriter
mkdir -p /tmp/linaro
\end_layout

\begin_layout Standard
\align center

\family typewriter
sudo cp linaro-precise-ubuntu-desktop-20120923-436.tar.gz /tmp/linaro/fs.tar.gz
\end_layout

\begin_layout Standard
Per verificare che il pacchetto sia stato copiato
\end_layout

\begin_layout Standard
\align center

\family typewriter
cd /tmp/linaro
\end_layout

\begin_layout Standard
\align center

\family typewriter
ls
\end_layout

\begin_layout Standard
il risultato dovrebbe essere
\end_layout

\begin_layout Standard
\align center

\family typewriter
\color red
fs.tar.gz
\end_layout

\begin_layout Standard
Adesso, spacchettare il file utilizzando
\end_layout

\begin_layout Standard
\align center

\family typewriter
sudo tar zxf fs.tar.gz
\end_layout

\begin_layout Standard
Digitando
\end_layout

\begin_layout Standard
\align center

\family typewriter
ls
\end_layout

\begin_layout Standard
questa volta il risultato dovrebbe essere
\end_layout

\begin_layout Standard
\align center

\family typewriter
\color red
binary fs.tar.gz
\end_layout

\begin_layout Standard
A questo punto, verificare che la partizione su cui si dovrà mettere il
 file system non sia stata automaticamente montata dal sistema.
 Digitare
\end_layout

\begin_layout Standard
\align center

\family typewriter
df
\end_layout

\begin_layout Standard
se il risultato è come quello mostrato in fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:df result"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Img_21.png
	lyxscale 70
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:df result"

\end_inset

df result
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
smontare la partizione ROOT_FS, utilizzando
\end_layout

\begin_layout Standard
\align center

\family typewriter
sudo umount /media/daniele/ROOT_FS
\end_layout

\begin_layout Standard
Si crea, adesso, una cartella temporanea su cui andare a montare la micro
 SD
\end_layout

\begin_layout Standard
\align center

\family typewriter
mkdir -p /tmp/sd_ext4
\end_layout

\begin_layout Standard
\align center

\family typewriter
sudo mount /dev/mmcblk0p2 /tmp/sd_ext4
\end_layout

\begin_layout Standard
Usare il comando 
\family typewriter
rsync
\family default
 per copiare la root del file system sulla micro SD
\end_layout

\begin_layout Standard
\align center

\family typewriter
cd binary/boot/filesystem.dir
\end_layout

\begin_layout Standard
\align center

\family typewriter
sudo rsync -a ./ /tmp/s4d_ext
\end_layout

\begin_layout Standard
Prima di rimuovere la scheda utilizzare il comando 
\family typewriter
umount
\family default
 per smontare 
\shape italic
/tmp/sd_ext4
\shape default
 ed assicurarsi che tutti i file siano stati sincronizzati
\end_layout

\begin_layout Standard
\align center

\family typewriter
sudo umount /tmp/sd_ext4
\end_layout

\begin_layout Standard
Quest'operazione potrebbe richiedere diversi minuti.
\end_layout

\begin_layout Subsection
Test di boot
\end_layout

\begin_layout Standard
Per procedere alla fase di booting del kernel compilato tramite scheda SD
 sulla board Zybo, è necessario avere sulla propria macchina un emulatore
 di terminale di trasmissione seriale.
 In questa documentazione viene utilizzato 
\series bold
gtkterm
\series default
.
 
\end_layout

\begin_layout Standard
Per poterlo scaricare, digitare
\end_layout

\begin_layout Standard
\align center

\family typewriter
sudo apt-get install gtkterm
\end_layout

\begin_layout Standard
A questo punto eseguire i seguenti passi:
\end_layout

\begin_layout Enumerate
Inserire la SD card appositamente predisposta nello slot della board
\end_layout

\begin_layout Enumerate
Assicurarsi che il jumper JP7 sia settato su SD, fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Booting "

\end_inset


\end_layout

\begin_layout Enumerate
Da terminale, digitar
\family typewriter
e sudo gtkterm
\end_layout

\begin_layout Enumerate
Nel menu di gtkterm andare su 
\series bold
Configuration → Port
\end_layout

\begin_layout Enumerate
Settare le impostazioni mostrate in fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:gtkterm config"

\end_inset


\end_layout

\begin_layout Enumerate
Premere il bottone PS-SRST e testare da terminale che effettivamente la
 board fa il boot del sistema che è stato configurato nei passi precedenti
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Img_22.png
	lyxscale 70
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Booting "

\end_inset

Booting da Micro SD
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Img_23.png
	lyxscale 70
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:gtkterm config"

\end_inset

Gtkterm configuration
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_body
\end_document
