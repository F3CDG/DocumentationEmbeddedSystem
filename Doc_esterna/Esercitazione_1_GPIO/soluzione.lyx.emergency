#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass book
\begin_preamble
\usepackage{listings,xcolor,courier,bookmark}
\usepackage{listingsutf8}
\definecolor{darkblue}{named}{blue}
\definecolor{darkred}{named}{red}
\definecolor{grau}{named}{gray}
\let\Righttorque\relax
\lstset{
captionpos=b,
commentstyle=\color[rgb]{0.133,0.545,0.133},
keywordstyle=\color{darkblue},
stringstyle=\color{darkred},
extendedchars=true,
basicstyle=\small\ttfamily,
showstringspaces=false,
tabsize=2,
numbers=left,
numberstyle=\tiny,
breakautoindent  = true,
breakindent      = 2em,
breaklines       = true,
postbreak        = ,
prebreak         = \raisebox{-.8ex}[0ex][0ex]{\Righttorque},
showspaces=false, 
showtabs=false, 
showstringspaces=false,
language=VHDL,
frame=single,
morecomment=[s]{--}
}


\renewcommand*{\lstlistingname}{Codice}


\usepackage{fancyhdr}
\pagestyle{fancy}

\fancyhead{} 
\fancyfoot{} 

\fancyhead[RO,LE]{\bfseries \leftmark}
\fancyfoot[LE,RO]{\thepage}
\fancyfoot[LO,CE]{Tesina in SE: Sistemi Embedded}
\renewcommand{\headrulewidth}{0.4pt}
\renewcommand{\footrulewidth}{0.4pt}

\date{}
\cfoot{}
\end_preamble
\use_default_options true
\master Tesina.lyx
\maintain_unincluded_children false
\language italian
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 2.5cm
\rightmargin 2cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Procedimento
\end_layout

\begin_layout Subsection
Zynq + Gpio
\end_layout

\begin_layout Subsubsection
Creazione del progetto
\end_layout

\begin_layout Standard
Aprire l'ambiente Vivado 2016.4.
 Prima di iniziare, assicurarsi che in 
\series bold
Tools → Options...
 → General 
\series default
il Target Language sia impostato su VHDL, fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Target Language"

\end_inset

.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Img_0.png
	lyxscale 60
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Target Language"

\end_inset

Target Language
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Nella schermata principale, cliccare su 
\series bold
Create New Project
\series default
.
 Viene aperto un wizard in cui bisogna definire il nome del progetto, 
\shape italic
\color blue
gpio_ptoject
\shape default
\color inherit
.
 Andando avanti, viene chiesto di specificare il tipo di progetto da creare.
 Selezionare 
\series bold
RTL Project
\series default
, spuntando l’opzione 
\shape italic
do not specify source at this time
\shape default
, per indicare che, in questa fase, non si vogliono caricare i file sorgente,
 fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Project-Type"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Img_1.png
	lyxscale 60
	scale 45

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Project-Type"

\end_inset

Project Type
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Nella finestra successiva, viene chiesto di selezionare la board o le parti
 di default da associare al progetto che si sta creando.
 Cliccare su 
\series bold
Boards
\series default
 e selezionare Zybo, fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Default-Part"

\end_inset

.
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Img_2.png
	lyxscale 60
	scale 45
	rotateOrigin center

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Default-Part"

\end_inset

Default Part
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Creazione IP-Core
\end_layout

\begin_layout Standard
Creato il progetto, bisogna istanziare una nuova periferica AXI4 al cui
 interno verrà definito succesivamente il componente GPIO.
 A tal fine, si clicca su 
\series bold
Tools → Create and Package New IP
\series default
 e si specifica che si sta creando una Periferica AXI4 spuntando 
\shape italic
Create a new AXI4 peripheral
\shape default
, come mostrato in fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Create-Peripheral,-Package"

\end_inset

.
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Img_3.png
	lyxscale 50
	scale 50
	rotateOrigin center

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Create-Peripheral,-Package"

\end_inset

Create Peripheral, Package IP or Package a Block Design
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Quindi, si settano: il nome dell'IP; versione; nome da visualizzare a display;
 descrizione; locazione in cui salvarlo.
 
\end_layout

\begin_layout Standard
In fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Add-Interfaces"

\end_inset

.
 è possibile aggiungere più interfacce alla periferica che si sta creando.
 Nel caso preso in questione, ne occorre una soltanto.
 Si noti, inoltre, che bisogna specificare: 
\end_layout

\begin_layout Itemize

\shape italic
Name
\shape default
, nome dell'interfaccia,
\shape italic
 
\color blue
S00_AXI
\color inherit
;
\end_layout

\begin_layout Itemize

\shape italic
Interface Type
\shape default
, tipo di interfaccia da utilizzare.
 Poichè il progetto non è eccessivamente complesso, si scegli 
\shape italic
\color blue
Lite
\color inherit
;
\end_layout

\begin_layout Itemize

\shape italic
Interface mode
\shape default
, specifica se la periferica che si sta creando deve agire da master o slave.
 Si sceglie 
\shape italic
\color blue
Slave
\color inherit
;
\end_layout

\begin_layout Itemize

\shape italic
Data width (Bits)
\shape default
, indica il parallelismo utilizzato dai registri della periferica.
 Si noti che, avendo utilizzato come target la Zybo della Digilent, tale
 parametro necessariamente dev'essere settato a 
\shape italic
\color blue
32
\color inherit
;
\shape default
 
\end_layout

\begin_layout Itemize

\shape italic
Number of Registers,
\shape default
 è il numero di registri richiesto alla periferica.
 Considerando che Vivado, quando istanzia una nuova periferica, riserva
 16 byte come spazio di indirizzamento, e che, la board Zybo necessita obbligato
riamente di registri a 32 bit, allora tale numero deve essere almeno 
\shape italic
\color blue
4
\shape default
\color inherit
.
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Img_4.png
	scale 45

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Add-Interfaces"

\end_inset

Add Interfaces
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Dopo aver cliccato su 
\series bold
Next
\series default
, si va a selezionare 
\series bold
EditIP
\series default
.
 A questo punto, si aggiunge al progetto il file VHDL, in cui si va a creare
 il GPIO.
 Cliccare, quindi, 
\series bold
File → Add Source
\series default
 e poi su 
\series bold
Add or Create design source
\series default
.
 Andare su 
\series bold
Create File
\series default
, specificare VHDL per il File Type, come nome 
\shape italic
\color blue
gpio
\shape default
\color inherit
 e come locazione in cui salvarlo 
\shape italic
\color blue
ip_repo/my_gpio_1.0/hdl
\shape default
\color inherit
, fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Add-or-Create"

\end_inset

.
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Img_5.png
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Add-or-Create"

\end_inset

Add or Create Design Sources
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Cliccando 
\series bold
Finish
\series default
, si apre un wizard per definire l’interfaccia del modulo.
 Con questa finestra, alla stessa maniera del tool Xilinx ISE, si può descrivere
 l'interfaccia del componente che si sta creando, in modo tale che il nuovo
 file .vhd che viene generato abbia già delle sezioni pre-configurate, fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Define-Module gpio"

\end_inset

.
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Img_6.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Define-Module gpio"

\end_inset

Define Module di gpio.vhd
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Si noti che, nel Design Source, è comparso il file che si sta per creare,
 fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:File-gpio.vhd"

\end_inset

.
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Img_7.png

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:File-gpio.vhd"

\end_inset

File gpio.vhd
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Codice GPIO
\end_layout

\begin_layout Standard
Con riferimento allo schema semplificato di fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Componente-sempli-GPIO"

\end_inset

, si ricorda che il componente GPIO presenta un segnale 
\shape italic
pad
\shape default
 che può funzionare sia da input e sia da output.
 Quando 
\shape italic
pad_en
\shape default
 è attivo, il segnale 
\shape italic
pad_out
\shape default
 viene propagato su 
\shape italic
pad
\shape default
, che funge, quindi da segnale di output.
 Diversamente, quando 
\shape italic
pad_e
\shape default
n non è attivo, il buffer tri-state, comportandosi da interruttore, propaga
 alta impedenza.
 In entrambi i casi, il segnale di 
\shape italic
pad
\shape default
 viene propagato su 
\shape italic
pad_in
\shape default
.
 
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/gpio.PNG

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Componente-sempli-GPIO"

\end_inset

Schema semplificato componente GPIO
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Partendo dallo schema sopra e aggiungedo un ulteriore segnale di controllo
 
\shape italic
pad_rw_n
\shape default
, di seguito, si riporta il codice per implementare il componente GPIO.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=VHDL, caption=gpio.vhd]
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

--------------------------------------------------------------------------
\end_layout

\begin_layout Plain Layout

-- Company: Gruppo IV - Sistemi Embedded 2016-17
\end_layout

\begin_layout Plain Layout

-- Engineer: Colella Gianni, Guida Ciro, Lombardi Daniele
\end_layout

\begin_layout Plain Layout

--
\end_layout

\begin_layout Plain Layout

-- Create Date: 10.05.2017 12:24:39
\end_layout

\begin_layout Plain Layout

-- Module Name: gpio - Dataflow
\end_layout

\begin_layout Plain Layout

-- Target Devices: Zynq Z-7010
\end_layout

\begin_layout Plain Layout

-- Tool Versions: Vivado 2016.4
\end_layout

\begin_layout Plain Layout

--
\end_layout

\begin_layout Plain Layout

--------------------------------------------------------------------------
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

library IEEE;
\end_layout

\begin_layout Plain Layout

use IEEE.STD_LOGIC_1164.ALL;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

entity gpio is
\end_layout

\begin_layout Plain Layout

    Port ( pad_out : in STD_LOGIC;
\end_layout

\begin_layout Plain Layout

           pad_rw_n : in STD_LOGIC;
\end_layout

\begin_layout Plain Layout

           pad_en : in STD_LOGIC;
\end_layout

\begin_layout Plain Layout

           pad_in : out STD_LOGIC;
\end_layout

\begin_layout Plain Layout

           pad : inout STD_LOGIC);
\end_layout

\begin_layout Plain Layout

end gpio;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

architecture DataFlow of gpio is
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

begin
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

pad_in <= pad when pad_en='1' else '0';
\end_layout

\begin_layout Plain Layout

pad <= pad_out and pad_en when pad_rw_n = '0' else 'Z';
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

end DataFlow;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Dovendo gestire complessivamente 8 segnali (4 per i led, 4 per gli switch),
 si va ad implementare un componente generico che implementa tante istanze
 singole di GPIO quante ne sono specificate nel generic del codice.
 Si ripete lo stesso procedimento visto sopra, fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Define-Module-gpio_array"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Img_8.png
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Define-Module-gpio_array"

\end_inset

Define Module gpio_array
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Si riporta, per completezza, il codice utilizzato.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=VHDL, caption=gpio array.vhd]
\end_layout

\begin_layout Plain Layout

--------------------------------------------------------------------------
\end_layout

\begin_layout Plain Layout

-- Company: Gruppo IV - Sistemi Embedded 2016-17
\end_layout

\begin_layout Plain Layout

-- Engineer: Colella Gianni, Guida Ciro, Lombardi Daniele
\end_layout

\begin_layout Plain Layout

--
\end_layout

\begin_layout Plain Layout

-- Create Date: 10.05.2017 12:34:37
\end_layout

\begin_layout Plain Layout

-- Module Name: gpio_array - Structural
\end_layout

\begin_layout Plain Layout

-- Target Devices: Zynq Z-7010
\end_layout

\begin_layout Plain Layout

-- Tool Versions: Vivado 2016.4
\end_layout

\begin_layout Plain Layout

--
\end_layout

\begin_layout Plain Layout

--------------------------------------------------------------------------
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

library IEEE;
\end_layout

\begin_layout Plain Layout

use IEEE.STD_LOGIC_1164.ALL;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

entity gpio_array is
\end_layout

\begin_layout Plain Layout

    Generic ( gpio_size : natural := 8);
\end_layout

\begin_layout Plain Layout

    Port ( pad_out : in STD_LOGIC_VECTOR (gpio_size-1 downto 0);
\end_layout

\begin_layout Plain Layout

           pad_rw_n : in STD_LOGIC_VECTOR (gpio_size-1 downto 0);
\end_layout

\begin_layout Plain Layout

           pad_en : in STD_LOGIC_VECTOR (gpio_size-1 downto 0);
\end_layout

\begin_layout Plain Layout

           pad_in : out STD_LOGIC_VECTOR (gpio_size-1 downto 0);
\end_layout

\begin_layout Plain Layout

           pad : inout STD_LOGIC_VECTOR (gpio_size-1 downto 0));
\end_layout

\begin_layout Plain Layout

end gpio_array;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

architecture Structural of gpio_array is
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

component gpio is
\end_layout

\begin_layout Plain Layout

    Port ( pad_out : in STD_LOGIC;
\end_layout

\begin_layout Plain Layout

           pad_rw_n : in STD_LOGIC;
\end_layout

\begin_layout Plain Layout

           pad_en : in STD_LOGIC;
\end_layout

\begin_layout Plain Layout

           pad_in : out STD_LOGIC;
\end_layout

\begin_layout Plain Layout

           pad : inout STD_LOGIC);
\end_layout

\begin_layout Plain Layout

end component;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

begin
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

MULTI_GPIO : for i in 0 to gpio_size-1 generate
\end_layout

\begin_layout Plain Layout

        SINGLE_GPIO : gpio port map (
\end_layout

\begin_layout Plain Layout

                pad_rw_n=>pad_rw_n(i),
\end_layout

\begin_layout Plain Layout

                pad_out => pad_out(i),
\end_layout

\begin_layout Plain Layout

                pad_en => pad_en(i),
\end_layout

\begin_layout Plain Layout

                pad => pad(i),
\end_layout

\begin_layout Plain Layout

                pad_in => pad_in(i));
\end_layout

\begin_layout Plain Layout

                
\end_layout

\begin_layout Plain Layout

                end generate;
\end_layout

\begin_layout Plain Layout

end Structural;
\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Inclusione GPIO nella periferica AXI 4
\end_layout

\begin_layout Standard
Aprendo l'interfaccia della periferica AXI 4, 
\shape italic
\color blue
my_gpio_v1_0_S00_AXI
\shape default
\color inherit
, si nota che tutto il codice è già stato predisposto dal tool.
 Lo si va a modificare opportunamente per includere il componente GPIO appena
 creato nella periferica AXI 4.
 In particolare
\end_layout

\begin_layout Itemize
in 
\shape italic
User to Add parameters her
\shape default
e, si aggiunge il codice di fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Parte-I-codice"

\end_inset

;
\end_layout

\begin_layout Itemize
in 
\shape italic
Users to Add ports here
\shape default
, si aggiunge il codice di fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Parte-I-codice"

\end_inset

;
\end_layout

\begin_layout Itemize
prima del 
\shape italic
begin
\shape default
 si aggiunge il codice di fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Parte-II-codice"

\end_inset

, che include il 
\shape italic
component gpio_array
\shape default
 e definisce il segnale 
\shape italic
periph_pad_in
\shape default
; 
\end_layout

\begin_layout Itemize
nel process che gestisce 
\shape italic
reg_data_out
\shape default
, si aggiunge il codice di fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Parte-III-codice-1"

\end_inset

;
\end_layout

\begin_layout Itemize
in 
\shape italic
Add user logic here
\shape default
, si aggiunge il codice di fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Parte-IV-codice"

\end_inset

.
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align left
\begin_inset Graphics
	filename images/Img_11.png
	lyxscale 180
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Parte-I-codice"

\end_inset

Parte I codice interfaccia AXI 4
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align left
\begin_inset Graphics
	filename images/Img_12.png
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Parte-II-codice"

\end_inset

Parte II codice interfaccia AXI 4
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align left
\begin_inset Graphics
	filename images/Img_12_1.png
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Parte-III-codice-1"

\end_inset

Parte III codice interfaccia AXI 4
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align left
\begin_inset Graphics
	filename images/Img_13.png
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Parte-IV-codice"

\end_inset

Parte IV codice interfaccia AXI 4
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
A questo punto, si modifica opportunamente anche la top level entity 
\shape italic
\color blue
my_gpio_v1_0
\shape default
\color inherit
, da fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Parte-I-codice-top"

\end_inset

 a fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Parte-III-codice-top"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align left
\begin_inset Graphics
	filename images/Img_14.png
	lyxscale 200
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Parte-I-codice-top"

\end_inset

Parte I codice Top level entity
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align left
\begin_inset Graphics
	filename images/Img_15.png
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Parte II codice Top level entity
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align left
\begin_inset Graphics
	filename images/Img_16.png
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Parte-III-codice-top"

\end_inset

Parte III codice Top level entity
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Da 
\series bold
Flow Navigator → Package IP
\series default
 andare su 
\series bold
File Groups
\series default
 e cliccare su 
\shape italic
Merge changes from File Groups Wizard
\shape default
, fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:File-Groups"

\end_inset

.
 
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Img_17_0.png
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:File-Groups"

\end_inset

File Groups
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Su 
\series bold
Customization Parameters
\series default
, si clicca su 
\shape italic
Merge changes from Customization Parameters Wizard
\shape default
, fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Customization-Parameters"

\end_inset

.
 
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Img_17.png
	scale 55

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Customization-Parameters"

\end_inset

Customization Parameters
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Adesso bisogna importare i parametri nascosti.
 Si clicca due volte sul parametro 
\shape italic
gpio_size
\shape default
 (comparso sotto Hidden Parameters) e si spunta l'opzione 
\shape italic
Visible in Customization GUI
\shape default
, fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Edit-IP-Parameter"

\end_inset

.
\end_layout

\begin_layout Standard
\align center
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Img_18.png
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Edit-IP-Parameter"

\end_inset

Edit IP Parameter
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In 
\series bold
Customization GUI
\series default
, nella view Layout, si trascina 
\shape italic
Gpio Size
\shape default
 tra gli altri parametri.
\end_layout

\begin_layout Standard
Per impacchettare il nuovo l’IP, nella sezione 
\series bold
Review and Package
\series default
 cliccare su 
\shape italic
Re-Package IP
\shape default
.
 Si chiude, infine, l'istanza di Vivado.
 
\end_layout

\begin_layout Subsubsection
Block Design
\end_layout

\begin_layout Standard
Da 
\series bold
Flow Navigator → IP Integrator → Create Block Design
\series default
, definire il nome 
\shape italic
\color blue
design_for_gpio
\shape default
\color inherit
.
 Come mostrato in fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Add IP to Block"

\end_inset

, cliccare su 
\series bold
Add IP
\series default
 per aggiungere nuovi IP-core al progetto.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Img_19.png
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Add IP to Block"

\end_inset

Add IP to Block Design
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Dalla lista visualizzata, aggiungere 
\shape italic
\color blue
ZYNQ7 Processing System
\shape default
\color inherit
 e 
\shape italic
\color blue
my_gpio_v1.0
\shape default
\color inherit
, vale a dire l'IP-core appena creato.
 Se non compare l'IP creato, allora andare su 
\series bold
Tools → Project Settings → IP → Repository Manager
\series default
, cliccare su 
\series bold
Add
\series default
 ed inserire il path del repository in cui è stato definito l'IP, come in
 fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:path repository"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Img_19.1.png
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:path repository"

\end_inset

Select path repository
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Si ottiene il Diagram di fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:diagram"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Img_20.png
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:diagram"

\end_inset

Diagram
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Nella stessa finestra cliccare su 
\shape italic
Run Block Automation
\shape default
 e successivamente su 
\shape italic
Run Connection Automation
\shape default
, che aggiunge al progetto l'AXI Interconnect e il Processor System Reset,
 opportunamente collegati dal tool Vivado.
 A questo punto, cliccando col tasto destro sul pad di uscita del gpio,
 andare su 
\series bold
Make External
\series default
, fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:make external"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Img_21.jpg
	scale 45

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:make external"

\end_inset

Make External
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Si ottiene il Diagram di fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:diagram-1"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Img_23.png
	scale 28

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:diagram-1"

\end_inset

Block Diagram
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Infine, cliccare su 
\series bold
Validate Design
\series default
 (in alternativa, basta premere il tasto F6), per validare il design e accertars
i che non ci siano errori oppure critical warning.
\end_layout

\begin_layout Subsubsection
Sintesi e Implementazione
\end_layout

\begin_layout Standard
Prima di procedere alla sintesi, cliccando con tasto destro su 
\shape italic
design_for_gpio
\shape default
, andare su 
\series bold
Create HDL Wrapper
\series default
 e selezionare 
\shape italic
Let Vivado manage wrapper and auto-update
\shape default
.
 Si noti che Vivado crea automaticamente la gerarchia di file VHDL.
\end_layout

\begin_layout Standard
In 
\series bold
Flow Navigator → Synthesis
\series default
 cliccare su 
\series bold
Run Synthesis
\series default
.
 A sintesi ultimata, spuntare 
\shape italic
Run Implementation
\shape default
 per avviare l'implementazione.
 Ad implementazione ultimata, spuntare 
\shape italic
Open Implemented Design
\shape default
.
\end_layout

\begin_layout Standard
Aprire 
\series bold
Floorplanning
\series default
 tra i Layout disponibili, come in fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:diagram-1-1"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Img_28.jpg

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:diagram-1-1"

\end_inset

Floorplanning Layout
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In I/O Ports mappare opportunamente le uscite del componente gpio con i
 pad della board, fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:pad_mapping"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Img_29.png
	lyxscale 70
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:pad_mapping"

\end_inset

Pad mapping
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Si clicca su salva e si da il nome al file XDC creato, 
\shape italic
\color blue
pad_location
\shape default
\color inherit
.
\end_layout

\begin_layout Standard
In 
\series bold
Flow Navigator → Program and Debug
\series default
 cliccare su 
\series bold
Generate Bitstream
\series default
.
\end_layout

\begin_layout Standard
A questo punto, andare su 
\series bold
File → Export → Export Hardware...

\series default
 e spuntare l'opzione 
\shape italic
Include bitstream
\shape default
.
\end_layout

\begin_layout Subsubsection
SDK Tool
\end_layout

\begin_layout Standard
Aprire SDK, direttamente dall'ambiente Vivado, cliccando su 
\series bold
File → Launch SDK
\series default
.
\end_layout

\begin_layout Standard
In SDK bisogna creare un nuovo progetto, andare, quindi, su 
\series bold
File → New → Application Project
\series default
 a cui viene dato il nome 
\shape italic
\color blue
gpio
\shape default
\color inherit
, fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:gpio ap"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Img_30.png
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:gpio ap"

\end_inset

Gpio Application Project
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Per programmare l'FPGA della board andare su 
\series bold
Xilinx Tools → Program FPGA
\series default
.
 Nella finestra che si apre, selezionare opportunamente il bitstream, fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:progr fpga"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Img_31.png
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:progr fpga"

\end_inset

Program FPGA
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Adesso è il momento di configurare il debug.
 Andare su 
\series bold
Run → Debug Configuration
\series default
.
 Nel menù a tendina a sinistra, selezionare 
\series bold
System Debugger
\series default
.
 Nella finestra 
\series bold
Target Setup
\series default
, in 
\series bold
Execute Script
\series default
, selezionare il file 
\shape italic
ps7_init.tcl
\shape default
 nella cartella 
\shape italic
design_for_gpio_wrapper_hw_platform_0
\shape default
, fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:debug config"

\end_inset

.
 A causa di un bug della versione 2016.4, prima di caricare quest'ultimo
 bisogna modificarlo andando ad eliminare l'opzione 
\shape italic
-force
\shape default
 ogni volta che si presenta.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Img_33.png
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:debug config"

\end_inset

Debug Configuration
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Premere 
\series bold
Apply
\series default
 ed infine 
\series bold
Debug
\series default
.
\end_layout

\begin_layout Standard
In 
\series bold
Project Explorer
\series default
, aprire 
\series bold
gpio → Binaries
\series default
.
 Cliccando tasto destro su 
\series bold
gpio.elf
\series default
, selezionare 
\series bold
Run as → Launch on Hardware (System Debugger)
\series default
, fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:launch"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Img_37.jpg
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:launch"

\end_inset

Launch on Hardware
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Aprire la schermata 
\series bold
Debug
\series default
, in alto a destra.
 In 
\series bold
Windows → Show view
\series default
, selezionare 
\series bold
Memory
\series default
.
 Cliccare sul tasto + verde (
\shape italic
Add Memory Monitor
\shape default
) e immettere il base address associato alla periferica gpio, 
\shape italic
\color blue
0x43c00000
\shape default
\color inherit
.
 Nell'esempio considerato in fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:register value"

\end_inset

, per una maggiore leggibilità si è scelta come formattazione 1 byte per
 ogni colonna e 4 byte per ogni riga.
 Pe modificarla basta cliccare tasto destro su 
\series bold
Address
\series default
 e premere 
\series bold
Format
\series default
.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Img_35.png
	lyxscale 250
	scale 60

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:register value"

\end_inset

Register value
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Come si nota, confrontando gli indirizzi col codice scritto precedentemente,
 
\shape italic
slv_reg0
\shape default
 è mappato all'indirizzo 
\shape italic
43c00000
\shape default
 e corrisponde al 
\shape italic
pad_out
\shape default
, 
\shape italic
slv_reg1
\shape default
 è mappato all'indirizzo 
\shape italic
43c00004
\shape default
 e corrisponde a 
\shape italic
pad_rw_n
\shape default
, infine, 
\shape italic
slv_reg2
\shape default
 è mappato all'indirizzo 
\shape italic
43c00008
\shape default
 e corrisponde a 
\shape italic
pad_en
\shape default
.
 Da notare che i byte sulle colonne sono in rappresentazione big endian,
 mentre i bit sono rappresentati da due valori esadecimali in rappresentazione
 little endian.
 In fig.
 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:led"

\end_inset

 si osserva l'accensione dei led coorispondente al valore scritto nel registro
 slv_reg0.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename images/Img_36.jpg
	lyxscale 80
	scale 40

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:led"

\end_inset

Accensione dei led sulla board
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\end_body
\end_document
