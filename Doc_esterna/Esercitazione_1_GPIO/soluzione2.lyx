#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass book
\begin_preamble
\usepackage{listings,xcolor,courier,bookmark}
\usepackage{listingsutf8}
\definecolor{darkblue}{named}{blue}
\definecolor{darkred}{named}{red}
\definecolor{grau}{named}{gray}
\let\Righttorque\relax
\lstset{
captionpos=b,
commentstyle=\color[rgb]{0.133,0.545,0.133},
keywordstyle=\color{darkblue},
stringstyle=\color{darkred},
extendedchars=true,
basicstyle=\small\ttfamily,
showstringspaces=false,
tabsize=2,
numbers=left,
numberstyle=\tiny,
breakautoindent  = true,
breakindent      = 2em,
breaklines       = true,
postbreak        = ,
prebreak         = \raisebox{-.8ex}[0ex][0ex]{\Righttorque},
showspaces=false, 
showtabs=false, 
showstringspaces=false,
language=VHDL,
frame=single,
morecomment=[s]{--}
}


\renewcommand*{\lstlistingname}{Codice}


\usepackage{fancyhdr}
\pagestyle{fancy}

\fancyhead{} 
\fancyfoot{} 

\fancyhead[RO,LE]{\bfseries \leftmark}
\fancyfoot[LE,RO]{\thepage}
\fancyfoot[LO,CE]{Tesina in SE: Sistemi Embedded}
\renewcommand{\headrulewidth}{0.4pt}
\renewcommand{\footrulewidth}{0.4pt}

\date{}
\cfoot{}
\end_preamble
\use_default_options true
\master Tesina.lyx
\maintain_unincluded_children false
\language italian
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 2.5cm
\rightmargin 2cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Supporto per le interruzioni
\end_layout

\begin_layout Subsection
Modifica IP core
\end_layout

\begin_layout Standard
Per aggiungere il supporto alle interruzioni, come da titolo, è necessario
 apportare delle modifiche all'IP core creato nei paragrafi precedenti.
 Si aggiungono, dunque, dei registri nel modulo di interfacciamento col
 bus AXI in modo tale da estendere le funzionalità della periferica:
\end_layout

\begin_layout Itemize

\series bold
interrupt mask register
\series default
 per mascherare le singole interruzioni;
\end_layout

\begin_layout Itemize

\series bold
interrupt status register
\series default
 che tiene traccia delle interruzioni pendenti e non servite;
\end_layout

\begin_layout Itemize

\series bold
interrupt acknowledge
\series default
 per la segnalazione da parte del processore e verso la periferica, di averla
 servita;
\end_layout

\begin_layout Itemize

\series bold
global interrupt enable
\series default
 per l'abilitazione totale al supporto delle interruzioni.
\end_layout

\begin_layout Standard
Inoltre si aggiuge una seconda interfaccia di uscita che viene collegata
 direttamente alla PS per segnalare gli eventi: il segnale 
\series bold
irq
\series default
.
\end_layout

\begin_layout Standard
La parte più interessante è quella relativa alla logica implementativa relativa
 allo status register, nella fattispecie la scrittura di un bit pari a 1
 ossia di un'interruzione pendente, avviene se e soltanto se la periferica
 è di input e la relativa maschera delle interruzioni permette di rilevare
 le interrupt sui singoli pin.
 Inoltre la segnalazione di aver servito un'interrupt avviene scrivendo
 un bit pari a 1 nel registro degli ack.
 Di conseguenza se almeno un bit del suddetto registro è pari a 1 vuol dire
 che il processore ha servito l'interrupt e di conseguenza è possibile resettare
 il registro di stato, nella posizione corrispondente all'interruzione che
 è stata servita.
 In altre parole, se sul registro 
\series bold
reg_ack
\series default
 è alto il 4° bit, allora nel registro 
\series bold
status_register
\series default
 sarà pulito soltanto il 4° bit.
 Tutti gli altri bit saranno lasciati inalterati, per segnalare eventualmente
 che ci sono ancora delle interruzioni pendenti.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=VHDL, firstnumber=457, caption= "my gpio v1 0
 S00 AXI.vhd"]
\end_layout

\begin_layout Plain Layout
	-- Add user logic here
\end_layout

\begin_layout Plain Layout
	
\end_layout

\begin_layout Plain Layout
	--istanza gpio
\end_layout

\begin_layout Plain Layout
    GPIO_ARRAY_INST: gpio_array port map(
\end_layout

\begin_layout Plain Layout
        pad_out => reg_pad_out(gpio_size-1 downto 0),
\end_layout

\begin_layout Plain Layout
        pad_rw_n => reg_pad_rw_n(gpio_size-1 downto 0),
\end_layout

\begin_layout Plain Layout
        pad_en => reg_pad_en(gpio_size-1 downto 0),
\end_layout

\begin_layout Plain Layout
        pad_in => periph_pad_in,
\end_layout

\begin_layout Plain Layout
            
\end_layout

\begin_layout Plain Layout
     --Implementazione della logica di interrupt
\end_layout

\begin_layout Plain Layout
      --il segnale di interrupt deve essere ottenuto solo  mediante una
 and bit a bit tra il segnale in ingresso (pad) e il registro delle interrupt
 mascherate (reg_im),
\end_layout

\begin_layout Plain Layout
      --inoltre poiché un interrupt è desiderabile solo se esso avviene
 mediante una periferica di input è necessario eseguire un'altra and bit
 a bit col registro di 
\end_layout

\begin_layout Plain Layout
      --read_write_n (reg_pad_rw_n)
\end_layout

\begin_layout Plain Layout
      pad_intr_temp <= (pad and reg_im(gpio_size-1 downto 0)) and reg_pad_rw_n(g
pio_size-1 downto 0);
\end_layout

\begin_layout Plain Layout
      
\end_layout

\begin_layout Plain Layout
      --il segnale di output (irq) è alto se esiste almeno una interrupt
 pendente e la global interrupt è attiva (reg_gie)
\end_layout

\begin_layout Plain Layout
      irq <= or_reduce(status_register(gpio_size-1 downto 0)) and reg_gie(0);
\end_layout

\begin_layout Plain Layout
      
\end_layout

\begin_layout Plain Layout
      --logica di scrittura all'interno dello statur register:
\end_layout

\begin_layout Plain Layout
      --se vi è almeno un bit alto di ack (reg_ack) allora si pulisce tutto
 il registro di stato, se invece non è arrivato alcun ack ma la global interrupt
 è attiva,
\end_layout

\begin_layout Plain Layout
      --allora voglio salvare nello status ulteriori bit di pending altrimenti
 voglio tener memoria del valore precedente.
\end_layout

\begin_layout Plain Layout
      process( S_AXI_ACLK ) is
\end_layout

\begin_layout Plain Layout
                begin
\end_layout

\begin_layout Plain Layout
                  if (rising_edge (S_AXI_ACLK)) then
\end_layout

\begin_layout Plain Layout
                    if ( S_AXI_ARESETN = '0' ) then
\end_layout

\begin_layout Plain Layout
                      status_register <= (others => '0');
\end_layout

\begin_layout Plain Layout
                    else
\end_layout

\begin_layout Plain Layout
                      if(or_reduce(reg_ack(gpio_size-1 downto 0))='1')then
\end_layout

\begin_layout Plain Layout
                          status_register(gpio_size-1 downto 0) <= status_regist
er(gpio_size-1 downto 0) xor (reg_ack(gpio_size-1 downto 0)and status_register(g
pio_size-1 downto 0));
\end_layout

\begin_layout Plain Layout
                      else
\end_layout

\begin_layout Plain Layout
                          if(reg_gie(0)='1')then
\end_layout

\begin_layout Plain Layout
                              new_intr <= pad_intr_temp;
\end_layout

\begin_layout Plain Layout
                          else
\end_layout

\begin_layout Plain Layout
                              new_intr <= (others => '0');        
\end_layout

\begin_layout Plain Layout
                          end if;
\end_layout

\begin_layout Plain Layout
                          status_register(gpio_size-1 downto 0) <= status_regist
er(gpio_size -1 downto 0) or new_intr; 
\end_layout

\begin_layout Plain Layout
                    end if;
\end_layout

\begin_layout Plain Layout
                  end if;
\end_layout

\begin_layout Plain Layout
               end if;
\end_layout

\begin_layout Plain Layout
           end process;
\end_layout

\begin_layout Plain Layout
      
\end_layout

\begin_layout Plain Layout
	-- User logic ends
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Modifica libreria HAL driver
\end_layout

\begin_layout Standard
Avendo aggiunto un'altra funzionalità al GPIO, per la scrittura del relativo
 driver è necessario aggiungere delle ulteriori funzioni relative all'accesso
 dei registri sopra citati, nonchè estendere la struttura dati relativa
 alle istanze di GPIO.
 Inoltre, volendo svincolare ulteriormente il programmatore dalla conoscenza
 della periferica, sono implementate delle funzioni per l'accesso diretto
 a particolari registri.
\end_layout

\begin_layout Standard
Di seguito la libreria gpio_custom.c.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=C, caption= "gpio custom.h"]
\end_layout

\begin_layout Plain Layout

/**
\end_layout

\begin_layout Plain Layout

/**
\end_layout

\begin_layout Plain Layout

  ******************************************************************************
\end_layout

\begin_layout Plain Layout

  * @file    	gpio_custom.h
\end_layout

\begin_layout Plain Layout

  * @authors	Colella Gianni - Guida Ciro - Lombardi Daniele / Group IV -
 Sistemi Embedded 2016-2017
\end_layout

\begin_layout Plain Layout

  * @version 	V1.0
\end_layout

\begin_layout Plain Layout

  * @date    	28-Jun-2017
\end_layout

\begin_layout Plain Layout

  * @brief   	Header file della libreria HAL driver per gestione GPIO custom
\end_layout

\begin_layout Plain Layout

  ******************************************************************************
\end_layout

\begin_layout Plain Layout

*/
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#ifndef SRC_GPIO_CUSTOM_H_
\end_layout

\begin_layout Plain Layout

#define SRC_GPIO_CUSTOM_H_
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#include <inttypes.h>
\end_layout

\begin_layout Plain Layout

#include <assert.h>
\end_layout

\begin_layout Plain Layout

#include <stdlib.h>
\end_layout

\begin_layout Plain Layout

#include <stdio.h>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/**
\end_layout

\begin_layout Plain Layout

  * @brief  Definizione struttura dati per la gestione del GPIO
\end_layout

\begin_layout Plain Layout

  */
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

typedef struct{
\end_layout

\begin_layout Plain Layout

	uint32_t *base_address; /*!< GPIO Base address*/
\end_layout

\begin_layout Plain Layout

	uint8_t pad_out_offset; /*!< GPIO offset registro di pad_out */
\end_layout

\begin_layout Plain Layout

	uint8_t pad_rw_n_offset; /*!< GPIO offset registro modalità read/write
 */
\end_layout

\begin_layout Plain Layout

	uint8_t pad_en_offset; /*!< GPIO offset registro abilitazione pin */
\end_layout

\begin_layout Plain Layout

	uint8_t pad_in_offset; /*!< GPIO offset registro pad_in*/
\end_layout

\begin_layout Plain Layout

	uint8_t imr_offset; /*!< GPIO offset registro interrupt mask*/
\end_layout

\begin_layout Plain Layout

	uint8_t sr_offset; /*!< GPIO offset registro di stato*/
\end_layout

\begin_layout Plain Layout

	uint8_t iack_offset; /*!< GPIO offset registro interrupt ack*/
\end_layout

\begin_layout Plain Layout

	uint8_t gie_offset; /*!< GPIO offset registro global interrupt enable*/
\end_layout

\begin_layout Plain Layout

}gpio_custom_TypeDef;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/**
\end_layout

\begin_layout Plain Layout

  * @brief Configurazione dell'indirizzo base
\end_layout

\begin_layout Plain Layout

  */
\end_layout

\begin_layout Plain Layout

#define GPIO_BASE XPAR_MY_GPIO_0_S00_AXI_BASEADDR
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/**
\end_layout

\begin_layout Plain Layout

  * @brief Spiazzamenti registri periferica
\end_layout

\begin_layout Plain Layout

  */
\end_layout

\begin_layout Plain Layout

#define gpio_custom_PAD_OUT 	0x00		/*<! PAD_OUT Register, used to write
 operation) */
\end_layout

\begin_layout Plain Layout

#define gpio_custom_PAD_RW_N 	0x04		/*<! PAD_RW_N Register, used to set
  Gpio  operation mode (read=1, write=0) */
\end_layout

\begin_layout Plain Layout

#define gpio_custom_PAD_EN 	0x08		/*<! PAD_EN Register, used to enable read
 and write operation */
\end_layout

\begin_layout Plain Layout

#define gpio_custom_PAD_IN 	0x0C		/*<! PAD_IN Register, used to read operation
 */
\end_layout

\begin_layout Plain Layout

#define gpio_custom_IMR		0x10		/*<! Interrupt Mask Regiser, used to mask
 interrupt on GPIO single port */
\end_layout

\begin_layout Plain Layout

#define gpio_custom_SR 		0x14		/*<! Status Register, used to save pending
 interrupts */
\end_layout

\begin_layout Plain Layout

#define gpio_custom_IACK 	0x18		/*<! Interrupt Ack Register, used to receive
 interrupts ack */
\end_layout

\begin_layout Plain Layout

#define gpio_custom_GIE 	0x1C		/*<! Global Interrupt Enable, used to enable/disa
ble global interrupts of GPIO */
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/**
\end_layout

\begin_layout Plain Layout

  * @brief Definizione dei valori alto e basso
\end_layout

\begin_layout Plain Layout

  */
\end_layout

\begin_layout Plain Layout

typedef enum{
\end_layout

\begin_layout Plain Layout

	LOW,
\end_layout

\begin_layout Plain Layout

	HIGH
\end_layout

\begin_layout Plain Layout

}gpio_custom_ValueType;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void gpio_custom_Init(gpio_custom_TypeDef *gpio, uint32_t base_address);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/*************************Funzioni private per gestione registri generici*******
**************/
\end_layout

\begin_layout Plain Layout

static void gpio_custom_Set_value_reg(gpio_custom_TypeDef *gpio, uint32_t
 reg, uint32_t mask,uint32_t mask_value);
\end_layout

\begin_layout Plain Layout

static void gpio_custom_Write_mask(gpio_custom_TypeDef *gpio,uint32_t reg,
 uint32_t mask, gpio_custom_ValueType value);
\end_layout

\begin_layout Plain Layout

static void gpio_custom_Write_one(gpio_custom_TypeDef *gpio,uint32_t reg,
 uint32_t position, gpio_custom_ValueType value);
\end_layout

\begin_layout Plain Layout

static uint32_t gpio_custom_Read_mask(gpio_custom_TypeDef *gpio,uint32_t
 reg, uint32_t mask);
\end_layout

\begin_layout Plain Layout

static uint32_t gpio_custom_Read_one(gpio_custom_TypeDef *gpio, uint32_t
 reg, uint32_t position);
\end_layout

\begin_layout Plain Layout

static void gpio_custom_Toggle_one(gpio_custom_TypeDef *gpio, uint32_t reg,uint8
_t position);
\end_layout

\begin_layout Plain Layout

static void gpio_custom_Toggle_mask(gpio_custom_TypeDef *gpio, uint32_t
 reg, uint32_t mask);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/***************************Funzioni utente per gestione specifici registri*****
*******/
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void gpio_custom_SetEnable(gpio_custom_TypeDef *gpio,uint32_t mask,gpio_custom_V
alueType value);
\end_layout

\begin_layout Plain Layout

uint32_t gpio_custom_GetEnable(gpio_custom_TypeDef *gpio,uint32_t mask);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void gpio_custom_SetValue(gpio_custom_TypeDef *gpio, uint32_t mask, gpio_custom_
ValueType value);
\end_layout

\begin_layout Plain Layout

uint32_t gpio_custom_GetValue(gpio_custom_TypeDef *gpio, uint32_t mask);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void gpio_custom_SetMode(gpio_custom_TypeDef *gpio, uint32_t mask, gpio_custom_V
alueType mvalue);
\end_layout

\begin_layout Plain Layout

uint32_t gpio_custom_GetMode(gpio_custom_TypeDef *gpio, uint32_t mask);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void gpio_custom_SetInterruptMask(gpio_custom_TypeDef *gpio, uint32_t mask,
 gpio_custom_ValueType value);
\end_layout

\begin_layout Plain Layout

uint32_t gpio_custom_GetInterruptMask(gpio_custom_TypeDef *gpio, uint32_t
 mask);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void gpio_custom_SetStatusInterrupt(gpio_custom_TypeDef *gpio, uint32_t
 mask, gpio_custom_ValueType value);
\end_layout

\begin_layout Plain Layout

uint32_t gpio_custom_GetStatusInterrupt(gpio_custom_TypeDef *gpio, uint32_t
 mask);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void gpio_custom_SetAckInterrupt(gpio_custom_TypeDef *gpio, uint32_t mask,
 gpio_custom_ValueType value);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void gpio_custom_SetGlobalInterrupt(gpio_custom_TypeDef *gpio, gpio_custom_Value
Type value);
\end_layout

\begin_layout Plain Layout

uint32_t gpio_custom_GetGlobalInterrupt(gpio_custom_TypeDef *gpio);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#endif /* SRC_GPIO_CUSTOM_H_ */
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Qui, invece, viene riportato il file gpio_custom.c
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=C, caption= "gpio custom.c"]
\end_layout

\begin_layout Plain Layout

/**
\end_layout

\begin_layout Plain Layout

  ******************************************************************************
\end_layout

\begin_layout Plain Layout

  * @file    	gpio_custom.c
\end_layout

\begin_layout Plain Layout

  * @authors	Colella Gianni - Guida Ciro - Lombardi Daniele / Group IV -
 Sistemi Embedded 2016-2017
\end_layout

\begin_layout Plain Layout

  * @version 	V1.0
\end_layout

\begin_layout Plain Layout

  * @date    	28-Jun-2017
\end_layout

\begin_layout Plain Layout

  * @brief   	Questo file mette a disposizione un firmware per gestire il
\end_layout

\begin_layout Plain Layout

  * 			comportamento della periferica
\end_layout

\begin_layout Plain Layout

  ******************************************************************************
\end_layout

\begin_layout Plain Layout

*/
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

#include "gpio_custom.h"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/**
\end_layout

\begin_layout Plain Layout

  * @brief  Questa funzione permette di inizializzare correttamente un GPIO
\end_layout

\begin_layout Plain Layout

  *
\end_layout

\begin_layout Plain Layout

  * @param  gpio: puntatore alla struttura gpio_custom_TypeDef che contiene
 le informazioni
\end_layout

\begin_layout Plain Layout

  * 		di configurazione della specifica GPIO
\end_layout

\begin_layout Plain Layout

  * @param  base_addr: puntatore ad un intero di 32 bit per il corretto
 indirizzamento della periferica
\end_layout

\begin_layout Plain Layout

  *
\end_layout

\begin_layout Plain Layout

  * @retval none
\end_layout

\begin_layout Plain Layout

  */
\end_layout

\begin_layout Plain Layout

void gpio_custom_Init(gpio_custom_TypeDef *gpio, uint32_t base_address){
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	assert(gpio!=NULL && "Errore allocazione di memoria per tipo GPIO");
\end_layout

\begin_layout Plain Layout

	assert(base_address%4==0 && "Base address non allineato a 4 byte");
\end_layout

\begin_layout Plain Layout

	gpio->base_address=(uint32_t*)base_address;
\end_layout

\begin_layout Plain Layout

	gpio->pad_en_offset=gpio_custom_PAD_EN;
\end_layout

\begin_layout Plain Layout

	gpio->pad_in_offset=gpio_custom_PAD_IN;
\end_layout

\begin_layout Plain Layout

	gpio->pad_out_offset=gpio_custom_PAD_OUT;
\end_layout

\begin_layout Plain Layout

	gpio->pad_rw_n_offset=gpio_custom_PAD_RW_N;
\end_layout

\begin_layout Plain Layout

	gpio->gie_offset=gpio_custom_GIE;
\end_layout

\begin_layout Plain Layout

	gpio->iack_offset=gpio_custom_IACK;
\end_layout

\begin_layout Plain Layout

	gpio->imr_offset=gpio_custom_IMR;
\end_layout

\begin_layout Plain Layout

	gpio->sr_offset=gpio_custom_SR;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/**
\end_layout

\begin_layout Plain Layout

  * @brief  Questa funzione permette di settare all'interno di uno specifico
\end_layout

\begin_layout Plain Layout

  * 		registro, dei valori in base ad una determinata maschera di bit
\end_layout

\begin_layout Plain Layout

  *
\end_layout

\begin_layout Plain Layout

  * @param  gpio: puntatore alla struttura gpio_custom_TypeDef che contiene
 le informazioni
\end_layout

\begin_layout Plain Layout

  * 		di configurazione della specifica GPIO
\end_layout

\begin_layout Plain Layout

  * @param  reg: intero a 32 bit che indica lo spiazzamento rispetto all'indiriz
zo
\end_layout

\begin_layout Plain Layout

  * 	    base del registro in cui scrivere
\end_layout

\begin_layout Plain Layout

  * @param mask: intero a 32 bit che specifica una maschera di bit, in particola
re
\end_layout

\begin_layout Plain Layout

  *        se all'i-esima posizione vi è un valore pari a 1 allora si è
 abilitati a
\end_layout

\begin_layout Plain Layout

  *        scrivere in quella posizione, se 0 allora il valore è mascherato
\end_layout

\begin_layout Plain Layout

  * @param mask_value: intero a 32 bit da scrivere all'interno del registro
\end_layout

\begin_layout Plain Layout

  *
\end_layout

\begin_layout Plain Layout

  * @retval none
\end_layout

\begin_layout Plain Layout

  */
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void gpio_custom_Set_value_reg(gpio_custom_TypeDef *gpio, uint32_t reg,
 uint32_t mask,uint32_t mask_value){
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	assert(gpio!=NULL && "Errore allocazione di memoria per tipo GPIO");
\end_layout

\begin_layout Plain Layout

	assert(gpio->base_address!=NULL && "Errore allocazione base address GPIO");
\end_layout

\begin_layout Plain Layout

	gpio->base_address[reg/4]=(gpio->base_address[reg/4] & ~mask) | (mask &
 mask_value);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/**
\end_layout

\begin_layout Plain Layout

  * @brief  Questa funzione permette di scrivere all'interno di uno specifico
\end_layout

\begin_layout Plain Layout

  * 		registro in base ad una determinata maschera di bit
\end_layout

\begin_layout Plain Layout

  *
\end_layout

\begin_layout Plain Layout

  * @param  gpio: puntatore alla struttura gpio_custom_TypeDef che contiene
 le informazioni
\end_layout

\begin_layout Plain Layout

  * 		di configurazione della specifica GPIO
\end_layout

\begin_layout Plain Layout

  * @param  reg: intero a 32 bit che indica lo spiazzamento rispetto all'indiriz
zo
\end_layout

\begin_layout Plain Layout

  * 	    base del registro in cui scrivere
\end_layout

\begin_layout Plain Layout

  * @param mask: intero a 32 bit che specifica una maschera di bit, in particola
re
\end_layout

\begin_layout Plain Layout

  *        se all'i-esima posizione vi è un valore pari a 1 allora si è
 abilitati a
\end_layout

\begin_layout Plain Layout

  *        scrivere in quella posizione, se 0 allora il valore è mascherato
\end_layout

\begin_layout Plain Layout

  * @param value: valore di tipo gpio_custom_ValueType da scrivere all'interno
 del registro
\end_layout

\begin_layout Plain Layout

  *
\end_layout

\begin_layout Plain Layout

  * @retval none
\end_layout

\begin_layout Plain Layout

  */
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void gpio_custom_Write_mask(gpio_custom_TypeDef *gpio,uint32_t reg, uint32_t
 mask, gpio_custom_ValueType value){
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	assert(gpio!=NULL && "Errore allocazione di memoria per tipo GPIO");
\end_layout

\begin_layout Plain Layout

	assert(gpio->base_address!=NULL && "Errore allocazione base address GPIO");
\end_layout

\begin_layout Plain Layout

	if((0x0000000F & mask) == mask)
\end_layout

\begin_layout Plain Layout

		value == HIGH ? gpio_custom_Set_value_reg(gpio,reg,mask,0xF) : gpio_custom_Set
_value_reg(gpio,reg,mask,0x0);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/**
\end_layout

\begin_layout Plain Layout

  * @brief  Questa funzione permette di scrivere un unico valore all'interno
 di uno
\end_layout

\begin_layout Plain Layout

  * 		specifico registro in base ad una determinata posizione
\end_layout

\begin_layout Plain Layout

  *
\end_layout

\begin_layout Plain Layout

  * @param  gpio: puntatore alla struttura gpio_custom_TypeDef che contiene
 le informazioni
\end_layout

\begin_layout Plain Layout

  * 		di configurazione della specifica GPIO
\end_layout

\begin_layout Plain Layout

  * @param  reg: intero a 32 bit che indica lo spiazzamento rispetto all'indiriz
zo
\end_layout

\begin_layout Plain Layout

  * 	    base del registro in cui scrivere
\end_layout

\begin_layout Plain Layout

  * @param position: intero a 32 bit che specifica la posizione in cui scrivere
\end_layout

\begin_layout Plain Layout

  * @param value: valore di tipo gpio_custom_ValueType da scrivere all'interno
 del registro
\end_layout

\begin_layout Plain Layout

  *
\end_layout

\begin_layout Plain Layout

  * @retval none
\end_layout

\begin_layout Plain Layout

  */
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void gpio_custom_Write_one(gpio_custom_TypeDef *gpio,uint32_t reg, uint32_t
 position, gpio_custom_ValueType value){
\end_layout

\begin_layout Plain Layout

	gpio_custom_Write_mask(gpio,reg, 0x1<<position, value);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/**
\end_layout

\begin_layout Plain Layout

  * @brief  Questa funzione permette di leggere all'interno di uno specifico
\end_layout

\begin_layout Plain Layout

  *         registro in base ad una determinata maschera di bit
\end_layout

\begin_layout Plain Layout

  * @param  gpio: puntatore alla struttura gpio_custom_TypeDef che contiene
 le informazioni
\end_layout

\begin_layout Plain Layout

  * 		di configurazione della specifica GPIO
\end_layout

\begin_layout Plain Layout

  * @param  reg: intero a 32 bit che indica lo spiazzamento rispetto all'indiriz
zo
\end_layout

\begin_layout Plain Layout

  * 	    base del registro in cui scrivere
\end_layout

\begin_layout Plain Layout

  * @param mask: intero a 32 bit che specifica una maschera di bit, in particola
re
\end_layout

\begin_layout Plain Layout

  *        se all'i-esima posizione vi è un valore pari a 1 allora si è
 abilitati a
\end_layout

\begin_layout Plain Layout

  *        leggere in quella posizione, viceversa se 0
\end_layout

\begin_layout Plain Layout

  *
\end_layout

\begin_layout Plain Layout

  * @retval intero a 32 bit
\end_layout

\begin_layout Plain Layout

  */
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

uint32_t gpio_custom_Read_mask(gpio_custom_TypeDef *gpio,uint32_t reg, uint32_t
 mask){
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	assert(gpio!=NULL && "Errore allocazione di memoria per tipo GPIO");
\end_layout

\begin_layout Plain Layout

	assert(gpio->base_address!=NULL && "Errore allocazione base address GPIO");
\end_layout

\begin_layout Plain Layout

	if((0x0000000F & mask) == mask){
\end_layout

\begin_layout Plain Layout

		return (gpio->base_address[reg/4] & mask);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	return -1;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/**
\end_layout

\begin_layout Plain Layout

  * @brief  Questa funzione permette di leggere un unico valore all'interno
 di uno
\end_layout

\begin_layout Plain Layout

  * 		specifico registro in base ad una determinata posizione
\end_layout

\begin_layout Plain Layout

  * @param  gpio: puntatore alla struttura gpio_custom_TypeDef che contiene
 le informazioni
\end_layout

\begin_layout Plain Layout

  * 		di configurazione della specifica GPIO
\end_layout

\begin_layout Plain Layout

  * @param  reg: intero a 32 bit che indica lo spiazzamento rispetto all'indiriz
zo
\end_layout

\begin_layout Plain Layout

  * 	    base del registro in cui scrivere
\end_layout

\begin_layout Plain Layout

  * @param position: intero a 32 bit che specifica la posizione in cui leggere
\end_layout

\begin_layout Plain Layout

  *
\end_layout

\begin_layout Plain Layout

  * @retval intero a 32 bit
\end_layout

\begin_layout Plain Layout

  */
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

uint32_t gpio_custom_Read_one(gpio_custom_TypeDef *gpio, uint32_t reg, uint32_t
 position){
\end_layout

\begin_layout Plain Layout

	return gpio_custom_Read_mask(gpio,reg,0x1<<position) == (0x1<<position);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/**
\end_layout

\begin_layout Plain Layout

  * @brief  Questa funzione permette il toggle di un singolo valore all'interno
 di
\end_layout

\begin_layout Plain Layout

  * 		uno specifico registro in base ad una determinata posizione
\end_layout

\begin_layout Plain Layout

  * @param  gpio: puntatore alla struttura gpio_custom_TypeDef che contiene
 le informazioni
\end_layout

\begin_layout Plain Layout

  * 		di configurazione della specifica GPIO
\end_layout

\begin_layout Plain Layout

  * @param  reg: intero a 32 bit che indica lo spiazzamento rispetto all'indiriz
zo
\end_layout

\begin_layout Plain Layout

  * 	    base del registro in cui effettuare il toggle
\end_layout

\begin_layout Plain Layout

  * @param position: intero a 8 bit che specifica la posizione in cui effettuare
\end_layout

\begin_layout Plain Layout

  *        il toggle
\end_layout

\begin_layout Plain Layout

  *
\end_layout

\begin_layout Plain Layout

  * @retval none
\end_layout

\begin_layout Plain Layout

  */
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void gpio_custom_Toggle_one(gpio_custom_TypeDef *gpio, uint32_t reg,uint8_t
 position){
\end_layout

\begin_layout Plain Layout

	gpio_custom_Read_one(gpio,reg,position) == HIGH ? gpio_custom_Write_one(gpio,re
g ,position,LOW) : gpio_custom_Write_one(gpio,reg,position,HIGH);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/**
\end_layout

\begin_layout Plain Layout

  * @brief  Questa funzione permette il toggle di un gruppo di bit all'interno
 di
\end_layout

\begin_layout Plain Layout

  * 		uno specifico registro in base ad una determinata masschera
\end_layout

\begin_layout Plain Layout

  *
\end_layout

\begin_layout Plain Layout

  * @param  gpio: puntatore alla struttura gpio_custom_TypeDef che contiene
 le informazioni
\end_layout

\begin_layout Plain Layout

  * 		di configurazione della specifica GPIO
\end_layout

\begin_layout Plain Layout

  * @param  reg: intero a 32 bit che indica lo spiazzamento rispetto all'indiriz
zo
\end_layout

\begin_layout Plain Layout

  * 	    base del registro in cui effettuare il toggle
\end_layout

\begin_layout Plain Layout

  * @param position: intero a 32 bit che specifica la maschera di bit, in
\end_layout

\begin_layout Plain Layout

  *        particolare se il valore i-esimo è pari a 1 allora in quella
 posizione
\end_layout

\begin_layout Plain Layout

  *        si è abilitati ad effettuare il toggle, viceversa non si effettua
 tale
\end_layout

\begin_layout Plain Layout

  *        operazione
\end_layout

\begin_layout Plain Layout

  *
\end_layout

\begin_layout Plain Layout

  * @retval none
\end_layout

\begin_layout Plain Layout

  */
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void gpio_custom_Toggle_mask(gpio_custom_TypeDef *gpio, uint32_t reg, uint32_t
 mask){
\end_layout

\begin_layout Plain Layout

	int i;
\end_layout

\begin_layout Plain Layout

	for(i=0;i<4;i++){
\end_layout

\begin_layout Plain Layout

		if((0x1<<i) == ((0x1<<i) & mask)){
\end_layout

\begin_layout Plain Layout

			gpio_custom_Toggle_one(gpio,reg,i);
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/**
\end_layout

\begin_layout Plain Layout

  * @brief  Questa funzione permette di settare il registro di abilitazione
 in base ad una
\end_layout

\begin_layout Plain Layout

  * 		maschera di bit
\end_layout

\begin_layout Plain Layout

  *
\end_layout

\begin_layout Plain Layout

  * @param  gpio: puntatore alla struttura gpio_custom_TypeDef che contiene
 le informazioni
\end_layout

\begin_layout Plain Layout

  * 		di configurazione della specifica GPIO
\end_layout

\begin_layout Plain Layout

  * @param  mask: intero a 32 bit che specifica una maschera di bit, in
 particolare
\end_layout

\begin_layout Plain Layout

  *         se all'i-esima posizione vi è un valore pari a 1 allora si è
 abilitati a
\end_layout

\begin_layout Plain Layout

  *         scrivere in quella posizione, se 0 allora il valore è mascherato
\end_layout

\begin_layout Plain Layout

  * @param  value: valore di tipo gpio_custom_ValueType da scrivere all'interno
 del registro
\end_layout

\begin_layout Plain Layout

  *
\end_layout

\begin_layout Plain Layout

  * @retval none
\end_layout

\begin_layout Plain Layout

  */
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void gpio_custom_SetEnable(gpio_custom_TypeDef *gpio,uint32_t mask,gpio_custom_V
alueType value){
\end_layout

\begin_layout Plain Layout

	gpio_custom_Write_mask(gpio,gpio_custom_PAD_EN, mask, value);
\end_layout

\begin_layout Plain Layout

	printf("Settaggio registro abilitazione
\backslash
n");
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/**
\end_layout

\begin_layout Plain Layout

  * @brief  Questa funzione permette di leggere il registro di abilitazione
 in base ad una
\end_layout

\begin_layout Plain Layout

  * 		maschera di bit
\end_layout

\begin_layout Plain Layout

  *
\end_layout

\begin_layout Plain Layout

  * @param  gpio: puntatore alla struttura gpio_custom_TypeDef che contiene
 le informazioni
\end_layout

\begin_layout Plain Layout

  * 		di configurazione della specifica GPIO
\end_layout

\begin_layout Plain Layout

  * @param  mask: intero a 32 bit che specifica una maschera di bit, in
 particolare
\end_layout

\begin_layout Plain Layout

  *         se all'i-esima posizione vi è un valore pari a 1 allora si è
 abilitati a
\end_layout

\begin_layout Plain Layout

  *         scrivere in quella posizione, se 0 allora il valore è mascherato
\end_layout

\begin_layout Plain Layout

  * @retval intero a 32 bit
\end_layout

\begin_layout Plain Layout

  */
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

uint32_t gpio_custom_GetEnable(gpio_custom_TypeDef *gpio, uint32_t mask){
\end_layout

\begin_layout Plain Layout

	printf("Lettura da registro abilitazione
\backslash
n");
\end_layout

\begin_layout Plain Layout

	return gpio_custom_Read_mask(gpio,gpio_custom_PAD_EN, mask);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/**
\end_layout

\begin_layout Plain Layout

  * @brief  Questa funzione permette di settare il registro pad_out in base
 ad una
\end_layout

\begin_layout Plain Layout

  * 		maschera di bit
\end_layout

\begin_layout Plain Layout

  *
\end_layout

\begin_layout Plain Layout

  * @param  gpio: puntatore alla struttura gpio_custom_TypeDef che contiene
 le informazioni
\end_layout

\begin_layout Plain Layout

  * 		di configurazione della specifica GPIO
\end_layout

\begin_layout Plain Layout

  * @param  mask: intero a 32 bit che specifica una maschera di bit, in
 particolare
\end_layout

\begin_layout Plain Layout

  *         se all'i-esima posizione vi è un valore pari a 1 allora si è
 abilitati a
\end_layout

\begin_layout Plain Layout

  *         scrivere in quella posizione, se 0 allora il valore è mascherato
\end_layout

\begin_layout Plain Layout

  * @param  value: valore di tipo gpio_custom_ValueType da scrivere all'interno
 del registro
\end_layout

\begin_layout Plain Layout

  *
\end_layout

\begin_layout Plain Layout

  * @retval none
\end_layout

\begin_layout Plain Layout

  */
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void gpio_custom_SetValue(gpio_custom_TypeDef *gpio, uint32_t mask, gpio_custom_
ValueType value){
\end_layout

\begin_layout Plain Layout

	gpio_custom_Write_mask(gpio,gpio_custom_PAD_OUT, mask, value);
\end_layout

\begin_layout Plain Layout

	printf("Scrittura valori su periferica
\backslash
n");
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/**
\end_layout

\begin_layout Plain Layout

  * @brief  Questa funzione permette di leggere il registro pad_in in base
 ad una
\end_layout

\begin_layout Plain Layout

  * 		maschera di bit
\end_layout

\begin_layout Plain Layout

  *
\end_layout

\begin_layout Plain Layout

  * @param  gpio: puntatore alla struttura gpio_custom_TypeDef che contiene
 le informazioni
\end_layout

\begin_layout Plain Layout

  * 		di configurazione della specifica GPIO
\end_layout

\begin_layout Plain Layout

  * @param  mask: intero a 32 bit che specifica una maschera di bit, in
 particolare
\end_layout

\begin_layout Plain Layout

  *         se all'i-esima posizione vi è un valore pari a 1 allora si è
 abilitati a
\end_layout

\begin_layout Plain Layout

  *         scrivere in quella posizione, se 0 allora il valore è mascherato
\end_layout

\begin_layout Plain Layout

  * @retval intero a 32 bit
\end_layout

\begin_layout Plain Layout

  */
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

uint32_t gpio_custom_GetValue(gpio_custom_TypeDef *gpio, uint32_t mask){
\end_layout

\begin_layout Plain Layout

	printf("Lettura valori da periferica
\backslash
n");
\end_layout

\begin_layout Plain Layout

	return gpio_custom_Read_mask(gpio,gpio_custom_PAD_IN, mask);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/**
\end_layout

\begin_layout Plain Layout

  * @brief  Questa funzione permette di settare il registro read/write_n
 in base ad una
\end_layout

\begin_layout Plain Layout

  * 		maschera di bit, ossia il modo di funzionamento del GPIO se di input
 o di output
\end_layout

\begin_layout Plain Layout

  *
\end_layout

\begin_layout Plain Layout

  * @param  gpio: puntatore alla struttura gpio_custom_TypeDef che contiene
 le informazioni
\end_layout

\begin_layout Plain Layout

  * 		di configurazione della specifica GPIO
\end_layout

\begin_layout Plain Layout

  * @param  mask: intero a 32 bit che specifica una maschera di bit, in
 particolare
\end_layout

\begin_layout Plain Layout

  *         se all'i-esima posizione vi è un valore pari a 1 allora si è
 abilitati a
\end_layout

\begin_layout Plain Layout

  *         scrivere in quella posizione, se 0 allora il valore è mascherato
\end_layout

\begin_layout Plain Layout

  * @param  value: valore di tipo gpio_custom_ValueType da scrivere all'interno
 del registro
\end_layout

\begin_layout Plain Layout

  *
\end_layout

\begin_layout Plain Layout

  * @retval none
\end_layout

\begin_layout Plain Layout

  */
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void gpio_custom_SetMode(gpio_custom_TypeDef *gpio, uint32_t mask, gpio_custom_V
alueType value){
\end_layout

\begin_layout Plain Layout

	gpio_custom_Write_mask(gpio,gpio_custom_PAD_RW_N, mask, value);
\end_layout

\begin_layout Plain Layout

	printf("Definita modalità periferica
\backslash
n");
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/**
\end_layout

\begin_layout Plain Layout

  * @brief  Questa funzione permette di leggere il registro read/write_n
 in base ad una
\end_layout

\begin_layout Plain Layout

  * 		maschera di bit, ossia di capire la modalità di funzionamento del
 GPIO
\end_layout

\begin_layout Plain Layout

  *
\end_layout

\begin_layout Plain Layout

  * @param  gpio: puntatore alla struttura gpio_custom_TypeDef che contiene
 le informazioni
\end_layout

\begin_layout Plain Layout

  * 		di configurazione della specifica GPIO
\end_layout

\begin_layout Plain Layout

  * @param  mask: intero a 32 bit che specifica una maschera di bit, in
 particolare
\end_layout

\begin_layout Plain Layout

  *         se all'i-esima posizione vi è un valore pari a 1 allora si è
 abilitati a
\end_layout

\begin_layout Plain Layout

  *         scrivere in quella posizione, se 0 allora il valore è mascherato
\end_layout

\begin_layout Plain Layout

  * @retval intero a 32 bit
\end_layout

\begin_layout Plain Layout

  */
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

uint32_t gpio_custom_GetMode(gpio_custom_TypeDef *gpio, uint32_t mask){
\end_layout

\begin_layout Plain Layout

	printf("Lettura tipologia periferica
\backslash
n");
\end_layout

\begin_layout Plain Layout

	return gpio_custom_Read_mask(gpio,gpio_custom_PAD_RW_N, mask);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/**
\end_layout

\begin_layout Plain Layout

  * @brief  Questa funzione permette di settare il registro interrupt mascherate
 in base ad una
\end_layout

\begin_layout Plain Layout

  * 		maschera di bit
\end_layout

\begin_layout Plain Layout

  *
\end_layout

\begin_layout Plain Layout

  * @param  gpio: puntatore alla struttura gpio_custom_TypeDef che contiene
 le informazioni
\end_layout

\begin_layout Plain Layout

  * 		di configurazione della specifica GPIO
\end_layout

\begin_layout Plain Layout

  * @param  mask: intero a 32 bit che specifica una maschera di bit, in
 particolare
\end_layout

\begin_layout Plain Layout

  *         se all'i-esima posizione vi è un valore pari a 1 allora si è
 abilitati a
\end_layout

\begin_layout Plain Layout

  *         scrivere in quella posizione, se 0 allora il valore è mascherato
\end_layout

\begin_layout Plain Layout

  * @param  value: valore di tipo gpio_custom_ValueType da scrivere all'interno
 del registro
\end_layout

\begin_layout Plain Layout

  *
\end_layout

\begin_layout Plain Layout

  * @retval none
\end_layout

\begin_layout Plain Layout

  */
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void gpio_custom_SetInterruptMask(gpio_custom_TypeDef *gpio, uint32_t mask,
 gpio_custom_ValueType value){
\end_layout

\begin_layout Plain Layout

	gpio_custom_Write_mask(gpio,gpio_custom_IMR, mask, value);
\end_layout

\begin_layout Plain Layout

	printf("Scrittura in registro delle interrupt mascherate
\backslash
n");
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/**
\end_layout

\begin_layout Plain Layout

  * @brief  Questa funzione permette di leggere il registro delle interrupt
 mascherate in base ad una
\end_layout

\begin_layout Plain Layout

  * 		maschera di bit.
\end_layout

\begin_layout Plain Layout

  *
\end_layout

\begin_layout Plain Layout

  * @param  gpio: puntatore alla struttura gpio_custom_TypeDef che contiene
 le informazioni
\end_layout

\begin_layout Plain Layout

  * 		di configurazione della specifica GPIO
\end_layout

\begin_layout Plain Layout

  * @param  mask: intero a 32 bit che specifica una maschera di bit, in
 particolare
\end_layout

\begin_layout Plain Layout

  *         se all'i-esima posizione vi è un valore pari a 1 allora si è
 abilitati a
\end_layout

\begin_layout Plain Layout

  *         scrivere in quella posizione, se 0 allora il valore è mascherato
\end_layout

\begin_layout Plain Layout

  * @retval intero a 32 bit
\end_layout

\begin_layout Plain Layout

  */
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

uint32_t gpio_custom_GetInterruptMask(gpio_custom_TypeDef *gpio, uint32_t
 mask){
\end_layout

\begin_layout Plain Layout

	printf("Lettura tipologia periferica
\backslash
n");
\end_layout

\begin_layout Plain Layout

	return gpio_custom_Read_mask(gpio,gpio_custom_IMR, mask);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/**
\end_layout

\begin_layout Plain Layout

  * @brief  Questa funzione permette di settare il registro di stato delle
 interrupt in base
\end_layout

\begin_layout Plain Layout

  *         ad una maschera di bit
\end_layout

\begin_layout Plain Layout

  *
\end_layout

\begin_layout Plain Layout

  * @param  gpio: puntatore alla struttura gpio_custom_TypeDef che contiene
 le informazioni
\end_layout

\begin_layout Plain Layout

  * 		di configurazione della specifica GPIO
\end_layout

\begin_layout Plain Layout

  * @param  mask: intero a 32 bit che specifica una maschera di bit, in
 particolare
\end_layout

\begin_layout Plain Layout

  *         se all'i-esima posizione vi è un valore pari a 1 allora si è
 abilitati a
\end_layout

\begin_layout Plain Layout

  *         scrivere in quella posizione, se 0 allora il valore è mascherato
\end_layout

\begin_layout Plain Layout

  * @param  value: valore di tipo gpio_custom_ValueType da scrivere all'interno
 del registro
\end_layout

\begin_layout Plain Layout

  *
\end_layout

\begin_layout Plain Layout

  * @retval none
\end_layout

\begin_layout Plain Layout

  */
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void gpio_custom_SetStatusInterrupt(gpio_custom_TypeDef *gpio, uint32_t
 mask, gpio_custom_ValueType value){
\end_layout

\begin_layout Plain Layout

	gpio_custom_Write_mask(gpio,gpio_custom_SR, mask, value);
\end_layout

\begin_layout Plain Layout

	printf("Scrittura in registro degli interrupt pendenti
\backslash
n");
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/**
\end_layout

\begin_layout Plain Layout

  * @brief  Questa funzione permette di leggere il registro di stato delle
 interrupt in base ad una
\end_layout

\begin_layout Plain Layout

  * 		maschera di bit.
\end_layout

\begin_layout Plain Layout

  *
\end_layout

\begin_layout Plain Layout

  * @param  gpio: puntatore alla struttura gpio_custom_TypeDef che contiene
 le informazioni
\end_layout

\begin_layout Plain Layout

  * 		di configurazione della specifica GPIO
\end_layout

\begin_layout Plain Layout

  * @param  mask: intero a 32 bit che specifica una maschera di bit, in
 particolare
\end_layout

\begin_layout Plain Layout

  *         se all'i-esima posizione vi è un valore pari a 1 allora si è
 abilitati a
\end_layout

\begin_layout Plain Layout

  *         scrivere in quella posizione, se 0 allora il valore è mascherato
\end_layout

\begin_layout Plain Layout

  * @retval intero a 32 bit
\end_layout

\begin_layout Plain Layout

  */
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

uint32_t gpio_custom_GetStatusInterrupt(gpio_custom_TypeDef *gpio, uint32_t
 mask){
\end_layout

\begin_layout Plain Layout

	printf("Lettura tipologia periferica
\backslash
n");
\end_layout

\begin_layout Plain Layout

	return gpio_custom_Read_mask(gpio,gpio_custom_SR, mask);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/**
\end_layout

\begin_layout Plain Layout

  * @brief  Questa funzione permette di settare il registro di ack delle
 interrupt in base
\end_layout

\begin_layout Plain Layout

  *         ad una maschera di bit
\end_layout

\begin_layout Plain Layout

  *
\end_layout

\begin_layout Plain Layout

  * @param  gpio: puntatore alla struttura gpio_custom_TypeDef che contiene
 le informazioni
\end_layout

\begin_layout Plain Layout

  * 		di configurazione della specifica GPIO
\end_layout

\begin_layout Plain Layout

  * @param  mask: intero a 32 bit che specifica una maschera di bit, in
 particolare
\end_layout

\begin_layout Plain Layout

  *         se all'i-esima posizione vi è un valore pari a 1 allora si è
 abilitati a
\end_layout

\begin_layout Plain Layout

  *         scrivere in quella posizione, se 0 allora il valore è mascherato
\end_layout

\begin_layout Plain Layout

  * @param  value: valore di tipo gpio_custom_ValueType da scrivere all'interno
 del registro
\end_layout

\begin_layout Plain Layout

  *
\end_layout

\begin_layout Plain Layout

  * @retval none
\end_layout

\begin_layout Plain Layout

  */
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void gpio_custom_SetAckInterrupt(gpio_custom_TypeDef *gpio, uint32_t mask,
 gpio_custom_ValueType value){
\end_layout

\begin_layout Plain Layout

	gpio_custom_Write_mask(gpio,gpio_custom_IACK, mask, value);
\end_layout

\begin_layout Plain Layout

	printf("Inviato interrupt ack alla periferica
\backslash
n");
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/**
\end_layout

\begin_layout Plain Layout

  * @brief  Questa funzione permette di settare il registro delle interrupt
 globali
\end_layout

\begin_layout Plain Layout

  *
\end_layout

\begin_layout Plain Layout

  * @param  gpio: puntatore alla struttura gpio_custom_TypeDef che contiene
 le informazioni
\end_layout

\begin_layout Plain Layout

  * 		di configurazione della specifica GPIO
\end_layout

\begin_layout Plain Layout

  * @retval none
\end_layout

\begin_layout Plain Layout

  */
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void gpio_custom_SetGlobalInterrupt(gpio_custom_TypeDef *gpio, gpio_custom_Value
Type value){
\end_layout

\begin_layout Plain Layout

	gpio_custom_Write_one(gpio,gpio_custom_GIE, 0x0, value);
\end_layout

\begin_layout Plain Layout

	printf("Scrittura in registro interrupt globale
\backslash
n");
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/**
\end_layout

\begin_layout Plain Layout

  * @brief  Questa funzione permette di leggere il registro delle interrupt
 globali
\end_layout

\begin_layout Plain Layout

  *
\end_layout

\begin_layout Plain Layout

  * @param  gpio: puntatore alla struttura gpio_custom_TypeDef che contiene
 le informazioni
\end_layout

\begin_layout Plain Layout

  * 		di configurazione della specifica GPIO
\end_layout

\begin_layout Plain Layout

  * @retval intero a 32 bit
\end_layout

\begin_layout Plain Layout

  */
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

uint32_t gpio_custom_GetGlobalInterrupt(gpio_custom_TypeDef *gpio){
\end_layout

\begin_layout Plain Layout

	printf("Lettura interrupt globale");
\end_layout

\begin_layout Plain Layout

	return gpio_custom_Read_one(gpio, gpio_custom_GIE, 0x0);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\end_body
\end_document
