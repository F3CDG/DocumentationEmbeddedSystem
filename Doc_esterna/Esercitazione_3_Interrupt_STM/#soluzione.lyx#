#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass book
\begin_preamble
\usepackage{listings,xcolor,courier,bookmark}
\usepackage{listingsutf8}
\definecolor{darkblue}{named}{blue}
\definecolor{darkred}{named}{red}
\definecolor{grau}{named}{gray}
\let\Righttorque\relax
\lstset{
captionpos=b,
commentstyle=\color[rgb]{0.133,0.545,0.133},
keywordstyle=\color{darkblue},
stringstyle=\color{darkred},
extendedchars=true,
basicstyle=\small\ttfamily,
showstringspaces=false,
tabsize=2,
numbers=left,
numberstyle=\tiny,
breakautoindent  = true,
breakindent      = 2em,
breaklines       = true,
postbreak        = ,
prebreak         = \raisebox{-.8ex}[0ex][0ex]{\Righttorque},
showspaces=false, 
showtabs=false, 
showstringspaces=false,
language=VHDL,
frame=single,
morecomment=[s]{--}
}


\renewcommand*{\lstlistingname}{Codice}


\usepackage{fancyhdr}
\pagestyle{fancy}

\fancyhead{} 
\fancyfoot{} 

\fancyhead[RO,LE]{\bfseries \leftmark}
\fancyfoot[LE,RO]{\thepage}
\fancyfoot[LO,CE]{Tesina in SE: Sistemi Embedded}
\renewcommand{\headrulewidth}{0.4pt}
\renewcommand{\footrulewidth}{0.4pt}

\date{}
\cfoot{}
\end_preamble
\use_default_options true
\master Tesina.lyx
\maintain_unincluded_children false
\language italian
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 2.5cm
\rightmargin 2cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Procedimento
\end_layout

\begin_layout Standard
Mediante la pressione del bottone utente si vuole dimostrare come è possibile
 incrementare il conteggio di una variabile e il contenuto mostrarlo sui
 led in notazione binaria.
 A tale scopo si propongono due soluzioni funzionalmente equivalenti, ma
 diverse nell'implementazione:
\end_layout

\begin_layout Itemize
interruzione a livello bare metal, in cui è necessario gestire il processo
 di comunicazione tra l'NVIC (Nested Vector Interrupt Controller) e la periferic
a di GPIO;
\end_layout

\begin_layout Itemize
interruzione a livello HAL, servendosi di una callback.
\end_layout

\begin_layout Standard
Entrambe le soluzioni prevedono una parte comune in cui vengono inizializzati
 i led e il bottone utente, in particolare si indica al bottone che ad ogni
 pressione e successivo rilascio di esso deve essere generato un'interruzione
 hardware.
 Nel caso di utilizzo di un microcontrollore STM32 F4 Discovery, il relativo
 pin di GPIO del bottone è mappato sul generatore di interruzione EXTI0
\end_layout

\begin_layout Subsection
Soluzione bare metal
\end_layout

\begin_layout Standard
Tale tipo di soluzione prevede che sia gestito il meccanismo di acknowledge
 e pulizia del relativo registro di stato.
 In particolare all'entrata della ISR viene richiamata la funzione NVIC_ClearPen
ding la quale permette all'NVIC di segnalare alla periferica di GPIO che
 l'interruzione è stata servita; in uscita invece utilizzando la macro __HAL_GPI
O_EXTI_CLEAR_IT viene pulito il registro di stato della periferica in modo
 tale che il processore possa effettuare il cambio di contesto, tornando
 all'esecuzione del programma principale.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=C][caption="main.c utilizzando EXTI0"]
\end_layout

\begin_layout Plain Layout

/**
\end_layout

\begin_layout Plain Layout

  ******************************************************************************
\end_layout

\begin_layout Plain Layout

  * @file    	main.c
\end_layout

\begin_layout Plain Layout

  * @author	Colella Gianni - Guida Ciro - Lombardi Daniele
\end_layout

\begin_layout Plain Layout

  *		Group IV - Sistemi Embedded 2016-2017
\end_layout

\begin_layout Plain Layout

  * @version 	V1.0
\end_layout

\begin_layout Plain Layout

  * @date    	16-June-2017
\end_layout

\begin_layout Plain Layout

  * @brief   	Esempio di utilizzo delle interruzioni BARE metal su board
 STM32
\end_layout

\begin_layout Plain Layout

  ******************************************************************************
*
\end_layout

\begin_layout Plain Layout

*/
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* Librerie Incluse ------------------------------------------------------------
-*/
\end_layout

\begin_layout Plain Layout

#include "stm32f4xx.h"
\end_layout

\begin_layout Plain Layout

#include "stm32f4_discovery.h"
\end_layout

\begin_layout Plain Layout

#include "stm32f4xx_hal_gpio.h"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* variabili globali -----------------------------------------------------------
--*/
\end_layout

\begin_layout Plain Layout

short int count=0;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* Prototipi funzioni ----------------------------------------------------------
--*/
\end_layout

\begin_layout Plain Layout

void setup();
\end_layout

\begin_layout Plain Layout

void loop();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/**
\end_layout

\begin_layout Plain Layout

  * @brief  Interrupt Service Routine lanciata da EXTI0.
\end_layout

\begin_layout Plain Layout

  * @note   Una volta invocata la routine essa implementa una logica custom,
 in particolare
\end_layout

\begin_layout Plain Layout

  *         una volta schicciato il bottone utente si provvede ad incrementare
 di 1 una variabile
\end_layout

\begin_layout Plain Layout

  *         e mostrato il conteggio sui led.
\end_layout

\begin_layout Plain Layout

  * @param  None.
\end_layout

\begin_layout Plain Layout

  * @retval None.
\end_layout

\begin_layout Plain Layout

  */
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void EXTI0_IRQHandler(){
\end_layout

\begin_layout Plain Layout

	/*L'NVIC segnala alla periferica su EXTI0 che è stata servita */
\end_layout

\begin_layout Plain Layout

	NVIC_ClearPendingIRQ(EXTI0_IRQn);
\end_layout

\begin_layout Plain Layout

	while(GPIOA->IDR&1);
\end_layout

\begin_layout Plain Layout

	  count++;
\end_layout

\begin_layout Plain Layout

	  GPIOD->ODR=count<<12;
\end_layout

\begin_layout Plain Layout

	  if(count==15)
\end_layout

\begin_layout Plain Layout

	    count=0;
\end_layout

\begin_layout Plain Layout

	/*Una volta servita l'interrupt, viene segnala la linea di EXTI da pulire
\end_layout

\begin_layout Plain Layout

	 * in modo tale da ritornare nel main*/
\end_layout

\begin_layout Plain Layout

	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int main(void)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	setup();
\end_layout

\begin_layout Plain Layout

	for(;;) loop();
\end_layout

\begin_layout Plain Layout

	return 1;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

/**
\end_layout

\begin_layout Plain Layout

  * @brief  Funzione per inizializzare le periferiche da utilizzare.
\end_layout

\begin_layout Plain Layout

  * @param  None.
\end_layout

\begin_layout Plain Layout

  * @retval None.
\end_layout

\begin_layout Plain Layout

  */
\end_layout

\begin_layout Plain Layout

void setup(){
\end_layout

\begin_layout Plain Layout

	HAL_Init();
\end_layout

\begin_layout Plain Layout

	BSP_LED_Init(LED3);
\end_layout

\begin_layout Plain Layout

	BSP_LED_Init(LED4);
\end_layout

\begin_layout Plain Layout

	BSP_LED_Init(LED5);
\end_layout

\begin_layout Plain Layout

	BSP_LED_Init(LED6);
\end_layout

\begin_layout Plain Layout

	BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void loop(){
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Soluzione HAL
\end_layout

\begin_layout Standard
Qui invece è necessario solamente la reimplementazione di una callback;
 tutti i meccanismi di gestione dell'interruzione sono astratti al programmatore
, dunque è necessario solamente definire una logica custom da eseguire ogni
 qualvolta venga richiamata la ISR.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=C][caption="main.c utilizzando EXTI10"]
\end_layout

\begin_layout Plain Layout

/**
\end_layout

\begin_layout Plain Layout

  ******************************************************************************
*****
\end_layout

\begin_layout Plain Layout

  * @file    	main.c
\end_layout

\begin_layout Plain Layout

  * @author	Colella Gianni - Guida Ciro - Lombardi Daniele
\end_layout

\begin_layout Plain Layout

  *		Group IV - Sistemi Embedded 2016-2017
\end_layout

\begin_layout Plain Layout

  * @version 	V1.0
\end_layout

\begin_layout Plain Layout

  * @date    	16-June-2017
\end_layout

\begin_layout Plain Layout

  * @brief   	Esempio di utilizzo delle interruzioni mediante HAL su board
 STM32
\end_layout

\begin_layout Plain Layout

  ******************************************************************************
*****
\end_layout

\begin_layout Plain Layout

*/
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* Librerie Incluse ------------------------------------------------------------
------*/
\end_layout

\begin_layout Plain Layout

#include "stm32f4xx.h"
\end_layout

\begin_layout Plain Layout

#include "stm32f4_discovery.h"
\end_layout

\begin_layout Plain Layout

#include "stm32f4xx_hal.h"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* Variabili globali -----------------------------------------------------------
-------*/
\end_layout

\begin_layout Plain Layout

short int count=0;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void setup();
\end_layout

\begin_layout Plain Layout

void loop();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/**
\end_layout

\begin_layout Plain Layout

  * @brief  Interrupt Service Routine lanciata da EXTI0.
\end_layout

\begin_layout Plain Layout

  * @note   Una volta invocata la routine essa implementa una logica custom,
 in particolare
\end_layout

\begin_layout Plain Layout

  *         una volta schicciato il bottone utente si provvede ad incrementare
 di 1 una variabile
\end_layout

\begin_layout Plain Layout

  *         e mostrato il conteggio sui led.
 Tale funzione reimplementa una callback
\end_layout

\begin_layout Plain Layout

  * @param  [in] GPIO_Pin: intero a 16 bit che indica il pin di GPIO da
 dove è stata
\end_layout

\begin_layout Plain Layout

  * 			 lanciata l'interruzione.
\end_layout

\begin_layout Plain Layout

  * @retval None.
\end_layout

\begin_layout Plain Layout

  */
\end_layout

\begin_layout Plain Layout

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
\end_layout

\begin_layout Plain Layout

	count++;
\end_layout

\begin_layout Plain Layout

	GPIOD->ODR=count<<12;
\end_layout

\begin_layout Plain Layout

	if(count==15)
\end_layout

\begin_layout Plain Layout

		count=0;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int main(void)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

	setup();
\end_layout

\begin_layout Plain Layout

	for(;;) loop();
\end_layout

\begin_layout Plain Layout

	return 1;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/**
\end_layout

\begin_layout Plain Layout

  * @brief  Funzione per inizializzare le periferiche da utilizzare.
\end_layout

\begin_layout Plain Layout

  * @param  None.
\end_layout

\begin_layout Plain Layout

  * @retval None.
\end_layout

\begin_layout Plain Layout

  */
\end_layout

\begin_layout Plain Layout

void setup(){
\end_layout

\begin_layout Plain Layout

	HAL_Init();
\end_layout

\begin_layout Plain Layout

	BSP_LED_Init(LED3);
\end_layout

\begin_layout Plain Layout

	BSP_LED_Init(LED4);
\end_layout

\begin_layout Plain Layout

	BSP_LED_Init(LED5);
\end_layout

\begin_layout Plain Layout

	BSP_LED_Init(LED6);
\end_layout

\begin_layout Plain Layout

	BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void loop(){
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	HAL_PWR_EnterSLEEPMode (PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Interrupt su EXTI1
\end_layout

\begin_layout Standard
Di seguito si riporta un esempio dell'utilizzo della EXTI1 come interruzione
 esterna, in particolare si utilizza il pin PC1.
 Nella funzione init_pin1C() si predispongono i registri RCC_AHB1ENR e SYSCFG_EX
TICR1 in modo tale che GPIOC venga abilitato e che dal pin PC1 venga lanciato
 ogni volta un'interrupt.
 Si indica inolte che l'interrupt è non mascherato e che esso è dovuto ad
 un fronte di salita.
 Infine grazie alle funzioni NVIC si setta il valore di priorità dell'interruzio
ne a 15 e la si abilita.
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{lstlisting}[language=C][caption="main.c utilizzando EXTI1"]
\end_layout

\begin_layout Plain Layout

/**
\end_layout

\begin_layout Plain Layout

  ******************************************************************************
*
\end_layout

\begin_layout Plain Layout

  * @file    	main.c
\end_layout

\begin_layout Plain Layout

  * @author	Colella Gianni - Guida Ciro - Lombardi Daniele
\end_layout

\begin_layout Plain Layout

  *		Group IV - Sistemi Embedded 2016-2017
\end_layout

\begin_layout Plain Layout

  * @version 	V1.0
\end_layout

\begin_layout Plain Layout

  * @date    	16-June-2017
\end_layout

\begin_layout Plain Layout

  * @brief   	Esempio di utilizzo delle interruzioni BARE metal su board
 STM32 e periferica EXTI1
\end_layout

\begin_layout Plain Layout

  ******************************************************************************
**
\end_layout

\begin_layout Plain Layout

*/
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* Librerie Incluse ------------------------------------------------------------
------*/
\end_layout

\begin_layout Plain Layout

#include "stm32f4xx.h"
\end_layout

\begin_layout Plain Layout

#include "stm32f4_discovery.h"
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* Prototipi funzione ----------------------------------------------------------
--------*/
\end_layout

\begin_layout Plain Layout

void setup();
\end_layout

\begin_layout Plain Layout

void loop();
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/* Variabili globali -----------------------------------------------------------
-------*/
\end_layout

\begin_layout Plain Layout

short int count=0;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/**
\end_layout

\begin_layout Plain Layout

  * @brief  Interrupt Service Routine lanciata da EXTI1.
\end_layout

\begin_layout Plain Layout

  * @note   Una volta invocata la routine essa implementa una logica custom,
 in particolare
\end_layout

\begin_layout Plain Layout

  *         schicciato il bottone utente si provvede ad incrementare di
 1 una variabile
\end_layout

\begin_layout Plain Layout

  *         e mostrato il conteggio sui led.
\end_layout

\begin_layout Plain Layout

  * @param  None.
\end_layout

\begin_layout Plain Layout

  * @retval None.
\end_layout

\begin_layout Plain Layout

  */
\end_layout

\begin_layout Plain Layout

void EXTI1_IRQHandler(){
\end_layout

\begin_layout Plain Layout

	count++;
\end_layout

\begin_layout Plain Layout

	GPIOD->ODR=count<<12;
\end_layout

\begin_layout Plain Layout

	if(count==15)
\end_layout

\begin_layout Plain Layout

		count=0;
\end_layout

\begin_layout Plain Layout

	NVIC_ClearPendingIRQ(EXTI1_IRQn);
\end_layout

\begin_layout Plain Layout

	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_1);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int main(void)
\end_layout

\begin_layout Plain Layout

{
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	setup();
\end_layout

\begin_layout Plain Layout

	for(;;)loop();
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void setup(){
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	init_pin1C();
\end_layout

\begin_layout Plain Layout

	BSP_LED_Init(LED3);
\end_layout

\begin_layout Plain Layout

	BSP_LED_Init(LED4);
\end_layout

\begin_layout Plain Layout

	BSP_LED_Init(LED5);
\end_layout

\begin_layout Plain Layout

	BSP_LED_Init(LED6);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void loop(){}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

/**
\end_layout

\begin_layout Plain Layout

  * @brief  Inizializzazione del pin PC1.
\end_layout

\begin_layout Plain Layout

  * @note   PC1 è settato in modo tale da lanciare interruzioni
\end_layout

\begin_layout Plain Layout

  * @param  None.
\end_layout

\begin_layout Plain Layout

  * @retval None.
\end_layout

\begin_layout Plain Layout

  */
\end_layout

\begin_layout Plain Layout

void init_pin1C(){
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	/*Abilitazione GPIOC*/
\end_layout

\begin_layout Plain Layout

	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	/*Si indica che da GPIOC, PC1, arriva un interrupt*/
\end_layout

\begin_layout Plain Layout

	SYSCFG->EXTICR[0] &= 0xFF0F;
\end_layout

\begin_layout Plain Layout

	SYSCFG->EXTICR[0] = SYSCFG_EXTICR1_EXTI1_PC;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	/*Interupt da GPIOC non mascherato*/
\end_layout

\begin_layout Plain Layout

	EXTI->IMR = (1<<1);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	/*Interrupt su fronte di salita*/
\end_layout

\begin_layout Plain Layout

	EXTI->RTSR=(1<<1);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	/*Settaggio priorità su NVIC*/
\end_layout

\begin_layout Plain Layout

	NVIC_SetPriority(EXTI1_IRQn,15);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	/*Abilitazione interrupt su NVIC*/
\end_layout

\begin_layout Plain Layout

	NVIC_EnableIRQ(EXTI1_IRQn);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{lstlisting}
\end_layout

\end_inset


\end_layout

\end_body
\end_document
